# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class enum__Torappu_BattleFunctionDisableMask(object):
    NONE = 0
    CARD_LIST = 1
    CHARACTER_MENU = 2
    CHARACTER_INFO = 4
    SYSTEM_MENU = 8
    PAUSE_BUTTON = 16
    SPEED_SWITCHER_BUTTON = 32
    BATTLE_STATUS = 64
    COST_PANEL = 128
    SLOW_MOTION = 256
    PAUSE_BUTTON_INTERACT = 512
    SYSTEM_MENU_INTERACT = 1024
    SPEED_SWITCHER_BUTTON_INTERACT = 2048
    UNIT_HUD_SKILL_CAST_MASK = 4096
    WITHDRAWABLE_PANEL = 8192
    COST_PANEL_KEEP_CHARACTERLIMIT = 16384
    CHARACTER_LIMIT = 32768
    AUTOCHESS_SELL_OR_DESTORY = 65536
    CHARACTER_MENU_PANEL = 131072
    ALL = 262143


class enum__Torappu_TileData_HeightType(object):
    LOWLAND = 0
    HIGHLAND = 1
    E_NUM = 2


class enum__Torappu_BuildableType(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_MotionMask(object):
    NONE = 0
    WALK_ONLY = 1
    FLY_ONLY = 2
    ALL = 3


class enum__Torappu_PlayerSideMask(object):
    ALL = 0
    SIDE_A = 2
    SIDE_B = 4
    NONE = 255


class enum__Torappu_SharedConsts_Direction(object):
    UP = 0
    RIGHT = 1
    DOWN = 2
    LEFT = 3
    E_NUM = 4
    INVALID = 4


class enum__Torappu_LevelData_Difficulty(object):
    NONE = 0
    NORMAL = 1
    FOUR_STAR = 2
    EASY = 4
    SIX_STAR = 8
    ALL = 15


class enum__Torappu_ProfessionCategory(object):
    NONE = 0
    WARRIOR = 1
    SNIPER = 2
    TANK = 4
    MEDIC = 8
    SUPPORT = 16
    CASTER = 32
    SPECIAL = 64
    TOKEN = 128
    TRAP = 256
    PIONEER = 512


class enum__Torappu_MotionMode(object):
    WALK = 0
    FLY = 1
    E_NUM = 2


class enum__Torappu_CheckpointType(object):
    MOVE = 0
    WAIT_FOR_SECONDS = 1
    WAIT_FOR_PLAY_TIME = 2
    WAIT_CURRENT_FRAGMENT_TIME = 3
    WAIT_CURRENT_WAVE_TIME = 4
    DISAPPEAR = 5
    APPEAR_AT_POS = 6
    ALERT = 7
    PATROL_MOVE = 8
    WAIT_BOSSRUSH_WAVE = 9
    MAP_OFFSET_MOVE = 10
    INVALID = 11


class enum__Torappu_SourceApplyWay(object):
    NONE = 0
    MELEE = 1
    RANGED = 2
    ALL = 3


class enum__Torappu_EnemyLevelType(object):
    NORMAL = 0
    ELITE = 1
    BOSS = 2
    E_NUM = 3


class enum__Torappu_SpType(object):
    NONE = 0
    INCREASE_WITH_TIME = 1
    INCREASE_WHEN_ATTACK = 2
    INCREASE_WHEN_TAKEN_DAMAGE = 4
    ATTACK_OR_DAMAGE = 6
    ALL = 7


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_ActionType(object):
    SPAWN = 0
    PREVIEW_CURSOR = 1
    STORY = 2
    TUTORIAL = 3
    PLAY_BGM = 4
    DISPLAY_ENEMY_INFO = 5
    ACTIVATE_PREDEFINED = 6
    PLAY_OPERA = 7
    TRIGGER_PREDEFINED = 8
    BATTLE_EVENTS = 9
    WITHDRAW_PREDEFINED = 10
    DIALOG = 11
    SHOW_ALL_HIDDEN_CARDS = 12
    EMPTY = 13
    E_NUM = 14


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RandomType(object):
    ALWAYS = 0
    PER_DAY = 1
    NEVER = 2
    PER_SETTLE_DAY = 3
    PER_SEASON = 4


class enum__Torappu_LevelData_WaveData_FragmentData_ActionData_RefreshType(object):
    ALWAYS = 0
    PER_DAY = 1
    NEVER = 2
    PER_SETTLE_DAY = 3
    PER_SEASON = 4


class enum__Torappu_EvolvePhase(object):
    PHASE_0 = 0
    PHASE_1 = 1
    PHASE_2 = 2
    PHASE_3 = 3
    E_NUM = 4


class clz_Torappu_Blackboard_DataPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Blackboard_DataPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Blackboard_DataPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Blackboard_DataPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Blackboard_DataPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_Blackboard_DataPair
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_Blackboard_DataPair
    def ValueStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Blackboard_DataPairStart(builder):
    builder.StartObject(3)

def clz_Torappu_Blackboard_DataPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_Blackboard_DataPairAddValue(builder, value):
    builder.PrependFloat32Slot(1, value, 0.0)

def clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(valueStr), 0)

def clz_Torappu_Blackboard_DataPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_Blackboard_DataPairT(object):

    # clz_Torappu_Blackboard_DataPairT
    def __init__(self):
        self.key = None  # type: str
        self.value = 0.0  # type: float
        self.valueStr = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuBlackboardDataPair = clz_Torappu_Blackboard_DataPair()
        clzTorappuBlackboardDataPair.Init(buf, pos)
        return cls.InitFromObj(clzTorappuBlackboardDataPair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuBlackboardDataPair):
        x = clz_Torappu_Blackboard_DataPairT()
        x._UnPack(clzTorappuBlackboardDataPair)
        return x

    # clz_Torappu_Blackboard_DataPairT
    def _UnPack(self, clzTorappuBlackboardDataPair):
        if clzTorappuBlackboardDataPair is None:
            return
        self.key = clzTorappuBlackboardDataPair.Key()
        self.value = clzTorappuBlackboardDataPair.Value()
        self.valueStr = clzTorappuBlackboardDataPair.ValueStr()

    # clz_Torappu_Blackboard_DataPairT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.valueStr is not None:
            valueStr = builder.CreateString(self.valueStr)
        clz_Torappu_Blackboard_DataPairStart(builder)
        if self.key is not None:
            clz_Torappu_Blackboard_DataPairAddKey(builder, key)
        clz_Torappu_Blackboard_DataPairAddValue(builder, self.value)
        if self.valueStr is not None:
            clz_Torappu_Blackboard_DataPairAddValueStr(builder, valueStr)
        clzTorappuBlackboardDataPair = clz_Torappu_Blackboard_DataPairEnd(builder)
        return clzTorappuBlackboardDataPair


class clz_Torappu_LevelData_Options(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_Options()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_Options(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_Options
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_Options
    def CharacterLimit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxLifePoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def InitialCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def MaxCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def CostIncreaseTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def MoveMultiplier(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def SteeringEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsHardTrainingLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def IsPredefinedCardsSelectable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def DisplayRestTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_Options
    def MaxPlayTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_Options
    def FunctionDisableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_Options
    def ConfigBlackBoardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

def clz_Torappu_LevelData_OptionsStart(builder):
    builder.StartObject(14)

def clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, characterLimit):
    builder.PrependInt32Slot(0, characterLimit, 0)

def clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, maxLifePoint):
    builder.PrependInt32Slot(1, maxLifePoint, 0)

def clz_Torappu_LevelData_OptionsAddInitialCost(builder, initialCost):
    builder.PrependInt32Slot(2, initialCost, 0)

def clz_Torappu_LevelData_OptionsAddMaxCost(builder, maxCost):
    builder.PrependInt32Slot(3, maxCost, 0)

def clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, costIncreaseTime):
    builder.PrependFloat32Slot(4, costIncreaseTime, 0.0)

def clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, moveMultiplier):
    builder.PrependFloat32Slot(5, moveMultiplier, 0.0)

def clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, steeringEnabled):
    builder.PrependBoolSlot(6, steeringEnabled, 0)

def clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, isTrainingLevel):
    builder.PrependBoolSlot(7, isTrainingLevel, 0)

def clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, isHardTrainingLevel):
    builder.PrependBoolSlot(8, isHardTrainingLevel, 0)

def clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, isPredefinedCardsSelectable):
    builder.PrependBoolSlot(9, isPredefinedCardsSelectable, 0)

def clz_Torappu_LevelData_OptionsAddDisplayRestTime(builder, displayRestTime):
    builder.PrependBoolSlot(10, displayRestTime, 0)

def clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, maxPlayTime):
    builder.PrependFloat32Slot(11, maxPlayTime, 0.0)

def clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, functionDisableMask):
    builder.PrependInt32Slot(12, functionDisableMask, 0)

def clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(configBlackBoard), 0)

def clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_OptionsEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_OptionsT(object):

    # clz_Torappu_LevelData_OptionsT
    def __init__(self):
        self.characterLimit = 0  # type: int
        self.maxLifePoint = 0  # type: int
        self.initialCost = 0  # type: int
        self.maxCost = 0  # type: int
        self.costIncreaseTime = 0.0  # type: float
        self.moveMultiplier = 0.0  # type: float
        self.steeringEnabled = False  # type: bool
        self.isTrainingLevel = False  # type: bool
        self.isHardTrainingLevel = False  # type: bool
        self.isPredefinedCardsSelectable = False  # type: bool
        self.displayRestTime = False  # type: bool
        self.maxPlayTime = 0.0  # type: float
        self.functionDisableMask = 0  # type: int
        self.configBlackBoard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataOptions = clz_Torappu_LevelData_Options()
        clzTorappuLevelDataOptions.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataOptions):
        x = clz_Torappu_LevelData_OptionsT()
        x._UnPack(clzTorappuLevelDataOptions)
        return x

    # clz_Torappu_LevelData_OptionsT
    def _UnPack(self, clzTorappuLevelDataOptions):
        if clzTorappuLevelDataOptions is None:
            return
        self.characterLimit = clzTorappuLevelDataOptions.CharacterLimit()
        self.maxLifePoint = clzTorappuLevelDataOptions.MaxLifePoint()
        self.initialCost = clzTorappuLevelDataOptions.InitialCost()
        self.maxCost = clzTorappuLevelDataOptions.MaxCost()
        self.costIncreaseTime = clzTorappuLevelDataOptions.CostIncreaseTime()
        self.moveMultiplier = clzTorappuLevelDataOptions.MoveMultiplier()
        self.steeringEnabled = clzTorappuLevelDataOptions.SteeringEnabled()
        self.isTrainingLevel = clzTorappuLevelDataOptions.IsTrainingLevel()
        self.isHardTrainingLevel = clzTorappuLevelDataOptions.IsHardTrainingLevel()
        self.isPredefinedCardsSelectable = clzTorappuLevelDataOptions.IsPredefinedCardsSelectable()
        self.displayRestTime = clzTorappuLevelDataOptions.DisplayRestTime()
        self.maxPlayTime = clzTorappuLevelDataOptions.MaxPlayTime()
        self.functionDisableMask = clzTorappuLevelDataOptions.FunctionDisableMask()
        if not clzTorappuLevelDataOptions.ConfigBlackBoardIsNone():
            self.configBlackBoard = []
            for i in range(clzTorappuLevelDataOptions.ConfigBlackBoardLength()):
                if clzTorappuLevelDataOptions.ConfigBlackBoard(i) is None:
                    self.configBlackBoard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataOptions.ConfigBlackBoard(i))
                    self.configBlackBoard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_OptionsT
    def Pack(self, builder):
        if self.configBlackBoard is not None:
            configBlackBoardlist = []
            for i in range(len(self.configBlackBoard)):
                configBlackBoardlist.append(self.configBlackBoard[i].Pack(builder))
            clz_Torappu_LevelData_OptionsStartConfigBlackBoardVector(builder, len(self.configBlackBoard))
            for i in reversed(range(len(self.configBlackBoard))):
                builder.PrependUOffsetTRelative(configBlackBoardlist[i])
            configBlackBoard = builder.EndVector()
        clz_Torappu_LevelData_OptionsStart(builder)
        clz_Torappu_LevelData_OptionsAddCharacterLimit(builder, self.characterLimit)
        clz_Torappu_LevelData_OptionsAddMaxLifePoint(builder, self.maxLifePoint)
        clz_Torappu_LevelData_OptionsAddInitialCost(builder, self.initialCost)
        clz_Torappu_LevelData_OptionsAddMaxCost(builder, self.maxCost)
        clz_Torappu_LevelData_OptionsAddCostIncreaseTime(builder, self.costIncreaseTime)
        clz_Torappu_LevelData_OptionsAddMoveMultiplier(builder, self.moveMultiplier)
        clz_Torappu_LevelData_OptionsAddSteeringEnabled(builder, self.steeringEnabled)
        clz_Torappu_LevelData_OptionsAddIsTrainingLevel(builder, self.isTrainingLevel)
        clz_Torappu_LevelData_OptionsAddIsHardTrainingLevel(builder, self.isHardTrainingLevel)
        clz_Torappu_LevelData_OptionsAddIsPredefinedCardsSelectable(builder, self.isPredefinedCardsSelectable)
        clz_Torappu_LevelData_OptionsAddDisplayRestTime(builder, self.displayRestTime)
        clz_Torappu_LevelData_OptionsAddMaxPlayTime(builder, self.maxPlayTime)
        clz_Torappu_LevelData_OptionsAddFunctionDisableMask(builder, self.functionDisableMask)
        if self.configBlackBoard is not None:
            clz_Torappu_LevelData_OptionsAddConfigBlackBoard(builder, configBlackBoard)
        clzTorappuLevelDataOptions = clz_Torappu_LevelData_OptionsEnd(builder)
        return clzTorappuLevelDataOptions


class hg__internal__MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = hg__internal__MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAshg__internal__MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # hg__internal__MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # hg__internal__MapData
    def RowSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def ColumnSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # hg__internal__MapData
    def MatrixData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # hg__internal__MapData
    def MatrixDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # hg__internal__MapData
    def MatrixDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # hg__internal__MapData
    def MatrixDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def hg__internal__MapDataStart(builder):
    builder.StartObject(3)

def hg__internal__MapDataAddRowSize(builder, rowSize):
    builder.PrependInt32Slot(0, rowSize, 0)

def hg__internal__MapDataAddColumnSize(builder, columnSize):
    builder.PrependInt32Slot(1, columnSize, 0)

def hg__internal__MapDataAddMatrixData(builder, matrixData):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(matrixData), 0)

def hg__internal__MapDataStartMatrixDataVector(builder, numElems):
    return builder.StartVector(2, numElems, 2)

def hg__internal__MapDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class hg__internal__MapDataT(object):

    # hg__internal__MapDataT
    def __init__(self):
        self.rowSize = 0  # type: int
        self.columnSize = 0  # type: int
        self.matrixData = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        hg_internal_mapData = hg__internal__MapData()
        hg_internal_mapData.Init(buf, pos)
        return cls.InitFromObj(hg_internal_mapData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, hg_internal_mapData):
        x = hg__internal__MapDataT()
        x._UnPack(hg_internal_mapData)
        return x

    # hg__internal__MapDataT
    def _UnPack(self, hg_internal_mapData):
        if hg_internal_mapData is None:
            return
        self.rowSize = hg_internal_mapData.RowSize()
        self.columnSize = hg_internal_mapData.ColumnSize()
        if not hg_internal_mapData.MatrixDataIsNone():
            if np is None:
                self.matrixData = []
                for i in range(hg_internal_mapData.MatrixDataLength()):
                    self.matrixData.append(hg_internal_mapData.MatrixData(i))
            else:
                self.matrixData = hg_internal_mapData.MatrixDataAsNumpy()

    # hg__internal__MapDataT
    def Pack(self, builder):
        if self.matrixData is not None:
            if np is not None and type(self.matrixData) is np.ndarray:
                matrixData = builder.CreateNumpyVector(self.matrixData)
            else:
                hg__internal__MapDataStartMatrixDataVector(builder, len(self.matrixData))
                for i in reversed(range(len(self.matrixData))):
                    builder.PrependInt16(self.matrixData[i])
                matrixData = builder.EndVector()
        hg__internal__MapDataStart(builder)
        hg__internal__MapDataAddRowSize(builder, self.rowSize)
        hg__internal__MapDataAddColumnSize(builder, self.columnSize)
        if self.matrixData is not None:
            hg__internal__MapDataAddMatrixData(builder, matrixData)
        hg_internal_mapData = hg__internal__MapDataEnd(builder)
        return hg_internal_mapData


class clz_UnityEngine_Vector3(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector3()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector3(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector3
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector3
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector3
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector3Start(builder):
    builder.StartObject(3)

def clz_UnityEngine_Vector3AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector3AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector3AddZ(builder, z):
    builder.PrependFloat32Slot(2, z, 0.0)

def clz_UnityEngine_Vector3End(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector3T(object):

    # clz_UnityEngine_Vector3T
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzUnityEngineVector3 = clz_UnityEngine_Vector3()
        clzUnityEngineVector3.Init(buf, pos)
        return cls.InitFromObj(clzUnityEngineVector3)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzUnityEngineVector3):
        x = clz_UnityEngine_Vector3T()
        x._UnPack(clzUnityEngineVector3)
        return x

    # clz_UnityEngine_Vector3T
    def _UnPack(self, clzUnityEngineVector3):
        if clzUnityEngineVector3 is None:
            return
        self.x = clzUnityEngineVector3.X()
        self.y = clzUnityEngineVector3.Y()
        self.z = clzUnityEngineVector3.Z()

    # clz_UnityEngine_Vector3T
    def Pack(self, builder):
        clz_UnityEngine_Vector3Start(builder)
        clz_UnityEngine_Vector3AddX(builder, self.x)
        clz_UnityEngine_Vector3AddY(builder, self.y)
        clz_UnityEngine_Vector3AddZ(builder, self.z)
        clzUnityEngineVector3 = clz_UnityEngine_Vector3End(builder)
        return clzUnityEngineVector3


class clz_Torappu_MapEffectData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapEffectData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapEffectData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapEffectData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapEffectData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_MapEffectData
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapEffectData
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapEffectDataStart(builder):
    builder.StartObject(3)

def clz_Torappu_MapEffectDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_MapEffectDataAddOffset(builder, offset):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(offset), 0)

def clz_Torappu_MapEffectDataAddDirection(builder, direction):
    builder.PrependInt32Slot(2, direction, 0)

def clz_Torappu_MapEffectDataEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class clz_Torappu_MapEffectDataT(object):

    # clz_Torappu_MapEffectDataT
    def __init__(self):
        self.key = None  # type: str
        self.offset = None  # type: Optional[clz_UnityEngine_Vector3T]
        self.direction = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapEffectData = clz_Torappu_MapEffectData()
        clzTorappuMapEffectData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapEffectData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapEffectData):
        x = clz_Torappu_MapEffectDataT()
        x._UnPack(clzTorappuMapEffectData)
        return x

    # clz_Torappu_MapEffectDataT
    def _UnPack(self, clzTorappuMapEffectData):
        if clzTorappuMapEffectData is None:
            return
        self.key = clzTorappuMapEffectData.Key()
        if clzTorappuMapEffectData.Offset() is not None:
            self.offset = clz_UnityEngine_Vector3T.InitFromObj(clzTorappuMapEffectData.Offset())
        self.direction = clzTorappuMapEffectData.Direction()

    # clz_Torappu_MapEffectDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.offset is not None:
            offset = self.offset.Pack(builder)
        clz_Torappu_MapEffectDataStart(builder)
        if self.key is not None:
            clz_Torappu_MapEffectDataAddKey(builder, key)
        if self.offset is not None:
            clz_Torappu_MapEffectDataAddOffset(builder, offset)
        clz_Torappu_MapEffectDataAddDirection(builder, self.direction)
        clzTorappuMapEffectData = clz_Torappu_MapEffectDataEnd(builder)
        return clzTorappuMapEffectData


class clz_Torappu_TileData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_TileData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_TileData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_TileData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_TileData
    def TileKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_TileData
    def HeightType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def BuildableType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PassableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_TileData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_TileData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_TileData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_TileData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def clz_Torappu_TileDataStart(builder):
    builder.StartObject(7)

def clz_Torappu_TileDataAddTileKey(builder, tileKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(tileKey), 0)

def clz_Torappu_TileDataAddHeightType(builder, heightType):
    builder.PrependInt32Slot(1, heightType, 0)

def clz_Torappu_TileDataAddBuildableType(builder, buildableType):
    builder.PrependInt32Slot(2, buildableType, 0)

def clz_Torappu_TileDataAddPassableMask(builder, passableMask):
    builder.PrependInt32Slot(3, passableMask, 0)

def clz_Torappu_TileDataAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(4, playerSideMask, 0)

def clz_Torappu_TileDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_TileDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TileDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def clz_Torappu_TileDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_TileDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_TileDataT(object):

    # clz_Torappu_TileDataT
    def __init__(self):
        self.tileKey = None  # type: str
        self.heightType = 0  # type: int
        self.buildableType = 0  # type: int
        self.passableMask = 0  # type: int
        self.playerSideMask = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]
        self.effects = None  # type: List[clz_Torappu_MapEffectDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuTileData = clz_Torappu_TileData()
        clzTorappuTileData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuTileData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuTileData):
        x = clz_Torappu_TileDataT()
        x._UnPack(clzTorappuTileData)
        return x

    # clz_Torappu_TileDataT
    def _UnPack(self, clzTorappuTileData):
        if clzTorappuTileData is None:
            return
        self.tileKey = clzTorappuTileData.TileKey()
        self.heightType = clzTorappuTileData.HeightType()
        self.buildableType = clzTorappuTileData.BuildableType()
        self.passableMask = clzTorappuTileData.PassableMask()
        self.playerSideMask = clzTorappuTileData.PlayerSideMask()
        if not clzTorappuTileData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuTileData.BlackboardLength()):
                if clzTorappuTileData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuTileData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)
        if not clzTorappuTileData.EffectsIsNone():
            self.effects = []
            for i in range(clzTorappuTileData.EffectsLength()):
                if clzTorappuTileData.Effects(i) is None:
                    self.effects.append(None)
                else:
                    clz_Torappu_MapEffectData_ = clz_Torappu_MapEffectDataT.InitFromObj(clzTorappuTileData.Effects(i))
                    self.effects.append(clz_Torappu_MapEffectData_)

    # clz_Torappu_TileDataT
    def Pack(self, builder):
        if self.tileKey is not None:
            tileKey = builder.CreateString(self.tileKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_TileDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        if self.effects is not None:
            effectslist = []
            for i in range(len(self.effects)):
                effectslist.append(self.effects[i].Pack(builder))
            clz_Torappu_TileDataStartEffectsVector(builder, len(self.effects))
            for i in reversed(range(len(self.effects))):
                builder.PrependUOffsetTRelative(effectslist[i])
            effects = builder.EndVector()
        clz_Torappu_TileDataStart(builder)
        if self.tileKey is not None:
            clz_Torappu_TileDataAddTileKey(builder, tileKey)
        clz_Torappu_TileDataAddHeightType(builder, self.heightType)
        clz_Torappu_TileDataAddBuildableType(builder, self.buildableType)
        clz_Torappu_TileDataAddPassableMask(builder, self.passableMask)
        clz_Torappu_TileDataAddPlayerSideMask(builder, self.playerSideMask)
        if self.blackboard is not None:
            clz_Torappu_TileDataAddBlackboard(builder, blackboard)
        if self.effects is not None:
            clz_Torappu_TileDataAddEffects(builder, effects)
        clzTorappuTileData = clz_Torappu_TileDataEnd(builder)
        return clzTorappuTileData


class clz_Torappu_GridPosition(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_GridPosition()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_GridPosition(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_GridPosition
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_GridPosition
    def Row(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_GridPosition
    def Col(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_GridPositionStart(builder):
    builder.StartObject(2)

def clz_Torappu_GridPositionAddRow(builder, row):
    builder.PrependInt32Slot(0, row, 0)

def clz_Torappu_GridPositionAddCol(builder, col):
    builder.PrependInt32Slot(1, col, 0)

def clz_Torappu_GridPositionEnd(builder):
    return builder.EndObject()



class clz_Torappu_GridPositionT(object):

    # clz_Torappu_GridPositionT
    def __init__(self):
        self.row = 0  # type: int
        self.col = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuGridPosition = clz_Torappu_GridPosition()
        clzTorappuGridPosition.Init(buf, pos)
        return cls.InitFromObj(clzTorappuGridPosition)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuGridPosition):
        x = clz_Torappu_GridPositionT()
        x._UnPack(clzTorappuGridPosition)
        return x

    # clz_Torappu_GridPositionT
    def _UnPack(self, clzTorappuGridPosition):
        if clzTorappuGridPosition is None:
            return
        self.row = clzTorappuGridPosition.Row()
        self.col = clzTorappuGridPosition.Col()

    # clz_Torappu_GridPositionT
    def Pack(self, builder):
        clz_Torappu_GridPositionStart(builder)
        clz_Torappu_GridPositionAddRow(builder, self.row)
        clz_Torappu_GridPositionAddCol(builder, self.col)
        clzTorappuGridPosition = clz_Torappu_GridPositionEnd(builder)
        return clzTorappuGridPosition


class clz_Torappu_MapData_Edge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData_Edge()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData_Edge(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData_Edge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData_Edge
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData_Edge
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_MapData_Edge
    def BlockMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_MapData_EdgeStart(builder):
    builder.StartObject(3)

def clz_Torappu_MapData_EdgeAddPos(builder, pos):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def clz_Torappu_MapData_EdgeAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def clz_Torappu_MapData_EdgeAddBlockMask(builder, blockMask):
    builder.PrependInt32Slot(2, blockMask, 0)

def clz_Torappu_MapData_EdgeEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class clz_Torappu_MapData_EdgeT(object):

    # clz_Torappu_MapData_EdgeT
    def __init__(self):
        self.pos = None  # type: Optional[clz_Torappu_GridPositionT]
        self.direction = 0  # type: int
        self.blockMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapDataEdge = clz_Torappu_MapData_Edge()
        clzTorappuMapDataEdge.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapDataEdge)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapDataEdge):
        x = clz_Torappu_MapData_EdgeT()
        x._UnPack(clzTorappuMapDataEdge)
        return x

    # clz_Torappu_MapData_EdgeT
    def _UnPack(self, clzTorappuMapDataEdge):
        if clzTorappuMapDataEdge is None:
            return
        if clzTorappuMapDataEdge.Pos() is not None:
            self.pos = clz_Torappu_GridPositionT.InitFromObj(clzTorappuMapDataEdge.Pos())
        self.direction = clzTorappuMapDataEdge.Direction()
        self.blockMask = clzTorappuMapDataEdge.BlockMask()

    # clz_Torappu_MapData_EdgeT
    def Pack(self, builder):
        if self.pos is not None:
            pos = self.pos.Pack(builder)
        clz_Torappu_MapData_EdgeStart(builder)
        if self.pos is not None:
            clz_Torappu_MapData_EdgeAddPos(builder, pos)
        clz_Torappu_MapData_EdgeAddDirection(builder, self.direction)
        clz_Torappu_MapData_EdgeAddBlockMask(builder, self.blockMask)
        clzTorappuMapDataEdge = clz_Torappu_MapData_EdgeEnd(builder)
        return clzTorappuMapDataEdge


class clz_Torappu_MapData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_MapData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_MapData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_MapData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_MapData
    def Map(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = hg__internal__MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def Tiles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_TileData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def TilesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TilesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_MapData
    def BlockEdges(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapData_Edge()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def BlockEdgesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def BlockEdgesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_MapData
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_MapData
    def Effects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_MapEffectData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_MapData
    def EffectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def EffectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_MapData
    def LayerRects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_MapData
    def LayerRectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_MapData
    def LayerRectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_MapDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_MapDataAddMap(builder, map):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(map), 0)

def clz_Torappu_MapDataAddTiles(builder, tiles):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tiles), 0)

def clz_Torappu_MapDataStartTilesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddBlockEdges(builder, blockEdges):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blockEdges), 0)

def clz_Torappu_MapDataStartBlockEdgesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddTags(builder, tags):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)

def clz_Torappu_MapDataStartTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddEffects(builder, effects):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(effects), 0)

def clz_Torappu_MapDataStartEffectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataAddLayerRects(builder, layerRects):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(layerRects), 0)

def clz_Torappu_MapDataStartLayerRectsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_MapDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_MapDataT(object):

    # clz_Torappu_MapDataT
    def __init__(self):
        self.map = None  # type: Optional[hg__internal__MapDataT]
        self.tiles = None  # type: List[clz_Torappu_TileDataT]
        self.blockEdges = None  # type: List[clz_Torappu_MapData_EdgeT]
        self.tags = None  # type: List[str]
        self.effects = None  # type: List[clz_Torappu_MapEffectDataT]
        self.layerRects = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuMapData = clz_Torappu_MapData()
        clzTorappuMapData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuMapData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuMapData):
        x = clz_Torappu_MapDataT()
        x._UnPack(clzTorappuMapData)
        return x

    # clz_Torappu_MapDataT
    def _UnPack(self, clzTorappuMapData):
        if clzTorappuMapData is None:
            return
        if clzTorappuMapData.Map() is not None:
            self.map = hg__internal__MapDataT.InitFromObj(clzTorappuMapData.Map())
        if not clzTorappuMapData.TilesIsNone():
            self.tiles = []
            for i in range(clzTorappuMapData.TilesLength()):
                if clzTorappuMapData.Tiles(i) is None:
                    self.tiles.append(None)
                else:
                    clz_Torappu_TileData_ = clz_Torappu_TileDataT.InitFromObj(clzTorappuMapData.Tiles(i))
                    self.tiles.append(clz_Torappu_TileData_)
        if not clzTorappuMapData.BlockEdgesIsNone():
            self.blockEdges = []
            for i in range(clzTorappuMapData.BlockEdgesLength()):
                if clzTorappuMapData.BlockEdges(i) is None:
                    self.blockEdges.append(None)
                else:
                    clz_Torappu_MapData_Edge_ = clz_Torappu_MapData_EdgeT.InitFromObj(clzTorappuMapData.BlockEdges(i))
                    self.blockEdges.append(clz_Torappu_MapData_Edge_)
        if not clzTorappuMapData.TagsIsNone():
            self.tags = []
            for i in range(clzTorappuMapData.TagsLength()):
                self.tags.append(clzTorappuMapData.Tags(i))
        if not clzTorappuMapData.EffectsIsNone():
            self.effects = []
            for i in range(clzTorappuMapData.EffectsLength()):
                if clzTorappuMapData.Effects(i) is None:
                    self.effects.append(None)
                else:
                    clz_Torappu_MapEffectData_ = clz_Torappu_MapEffectDataT.InitFromObj(clzTorappuMapData.Effects(i))
                    self.effects.append(clz_Torappu_MapEffectData_)
        if not clzTorappuMapData.LayerRectsIsNone():
            self.layerRects = []
            for i in range(clzTorappuMapData.LayerRectsLength()):
                self.layerRects.append(clzTorappuMapData.LayerRects(i))

    # clz_Torappu_MapDataT
    def Pack(self, builder):
        if self.map is not None:
            map = self.map.Pack(builder)
        if self.tiles is not None:
            tileslist = []
            for i in range(len(self.tiles)):
                tileslist.append(self.tiles[i].Pack(builder))
            clz_Torappu_MapDataStartTilesVector(builder, len(self.tiles))
            for i in reversed(range(len(self.tiles))):
                builder.PrependUOffsetTRelative(tileslist[i])
            tiles = builder.EndVector()
        if self.blockEdges is not None:
            blockEdgeslist = []
            for i in range(len(self.blockEdges)):
                blockEdgeslist.append(self.blockEdges[i].Pack(builder))
            clz_Torappu_MapDataStartBlockEdgesVector(builder, len(self.blockEdges))
            for i in reversed(range(len(self.blockEdges))):
                builder.PrependUOffsetTRelative(blockEdgeslist[i])
            blockEdges = builder.EndVector()
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            clz_Torappu_MapDataStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector()
        if self.effects is not None:
            effectslist = []
            for i in range(len(self.effects)):
                effectslist.append(self.effects[i].Pack(builder))
            clz_Torappu_MapDataStartEffectsVector(builder, len(self.effects))
            for i in reversed(range(len(self.effects))):
                builder.PrependUOffsetTRelative(effectslist[i])
            effects = builder.EndVector()
        if self.layerRects is not None:
            layerRectslist = []
            for i in range(len(self.layerRects)):
                layerRectslist.append(builder.CreateString(self.layerRects[i]))
            clz_Torappu_MapDataStartLayerRectsVector(builder, len(self.layerRects))
            for i in reversed(range(len(self.layerRects))):
                builder.PrependUOffsetTRelative(layerRectslist[i])
            layerRects = builder.EndVector()
        clz_Torappu_MapDataStart(builder)
        if self.map is not None:
            clz_Torappu_MapDataAddMap(builder, map)
        if self.tiles is not None:
            clz_Torappu_MapDataAddTiles(builder, tiles)
        if self.blockEdges is not None:
            clz_Torappu_MapDataAddBlockEdges(builder, blockEdges)
        if self.tags is not None:
            clz_Torappu_MapDataAddTags(builder, tags)
        if self.effects is not None:
            clz_Torappu_MapDataAddEffects(builder, effects)
        if self.layerRects is not None:
            clz_Torappu_MapDataAddLayerRects(builder, layerRects)
        clzTorappuMapData = clz_Torappu_MapDataEnd(builder)
        return clzTorappuMapData


class clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LegacyInLevelRuneData
    def DifficultyMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BuildableMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LegacyInLevelRuneData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, difficultyMask):
    builder.PrependInt32Slot(0, difficultyMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(2, professionMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, buildableMask):
    builder.PrependInt32Slot(3, buildableMask, 0)

def clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LegacyInLevelRuneDataT(object):

    # clz_Torappu_LegacyInLevelRuneDataT
    def __init__(self):
        self.difficultyMask = 0  # type: int
        self.key = None  # type: str
        self.professionMask = 0  # type: int
        self.buildableMask = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLegacyInLevelRuneData = clz_Torappu_LegacyInLevelRuneData()
        clzTorappuLegacyInLevelRuneData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLegacyInLevelRuneData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLegacyInLevelRuneData):
        x = clz_Torappu_LegacyInLevelRuneDataT()
        x._UnPack(clzTorappuLegacyInLevelRuneData)
        return x

    # clz_Torappu_LegacyInLevelRuneDataT
    def _UnPack(self, clzTorappuLegacyInLevelRuneData):
        if clzTorappuLegacyInLevelRuneData is None:
            return
        self.difficultyMask = clzTorappuLegacyInLevelRuneData.DifficultyMask()
        self.key = clzTorappuLegacyInLevelRuneData.Key()
        self.professionMask = clzTorappuLegacyInLevelRuneData.ProfessionMask()
        self.buildableMask = clzTorappuLegacyInLevelRuneData.BuildableMask()
        if not clzTorappuLegacyInLevelRuneData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLegacyInLevelRuneData.BlackboardLength()):
                if clzTorappuLegacyInLevelRuneData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLegacyInLevelRuneData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LegacyInLevelRuneDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LegacyInLevelRuneDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        clz_Torappu_LegacyInLevelRuneDataStart(builder)
        clz_Torappu_LegacyInLevelRuneDataAddDifficultyMask(builder, self.difficultyMask)
        if self.key is not None:
            clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)
        clz_Torappu_LegacyInLevelRuneDataAddProfessionMask(builder, self.professionMask)
        clz_Torappu_LegacyInLevelRuneDataAddBuildableMask(builder, self.buildableMask)
        if self.blackboard is not None:
            clz_Torappu_LegacyInLevelRuneDataAddBlackboard(builder, blackboard)
        clzTorappuLegacyInLevelRuneData = clz_Torappu_LegacyInLevelRuneDataEnd(builder)
        return clzTorappuLegacyInLevelRuneData


class dict__string__list_clz_Torappu_LegacyInLevelRuneData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__list_clz_Torappu_LegacyInLevelRuneData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def Value(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # dict__string__list_clz_Torappu_LegacyInLevelRuneData
    def ValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder):
    builder.StartObject(2)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class dict__string__list_clz_Torappu_LegacyInLevelRuneDataT(object):

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: List[clz_Torappu_LegacyInLevelRuneDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dict_string_listClzTorappuLegacyInLevelRuneData = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
        dict_string_listClzTorappuLegacyInLevelRuneData.Init(buf, pos)
        return cls.InitFromObj(dict_string_listClzTorappuLegacyInLevelRuneData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dict_string_listClzTorappuLegacyInLevelRuneData):
        x = dict__string__list_clz_Torappu_LegacyInLevelRuneDataT()
        x._UnPack(dict_string_listClzTorappuLegacyInLevelRuneData)
        return x

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def _UnPack(self, dict_string_listClzTorappuLegacyInLevelRuneData):
        if dict_string_listClzTorappuLegacyInLevelRuneData is None:
            return
        self.key = dict_string_listClzTorappuLegacyInLevelRuneData.Key()
        if not dict_string_listClzTorappuLegacyInLevelRuneData.ValueIsNone():
            self.value = []
            for i in range(dict_string_listClzTorappuLegacyInLevelRuneData.ValueLength()):
                if dict_string_listClzTorappuLegacyInLevelRuneData.Value(i) is None:
                    self.value.append(None)
                else:
                    clz_Torappu_LegacyInLevelRuneData_ = clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(dict_string_listClzTorappuLegacyInLevelRuneData.Value(i))
                    self.value.append(clz_Torappu_LegacyInLevelRuneData_)

    # dict__string__list_clz_Torappu_LegacyInLevelRuneDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            valuelist = []
            for i in range(len(self.value)):
                valuelist.append(self.value[i].Pack(builder))
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataStartValueVector(builder, len(self.value))
            for i in reversed(range(len(self.value))):
                builder.PrependUOffsetTRelative(valuelist[i])
            value = builder.EndVector()
        dict__string__list_clz_Torappu_LegacyInLevelRuneDataStart(builder)
        if self.key is not None:
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddKey(builder, key)
        if self.value is not None:
            dict__string__list_clz_Torappu_LegacyInLevelRuneDataAddValue(builder, value)
        dict_string_listClzTorappuLegacyInLevelRuneData = dict__string__list_clz_Torappu_LegacyInLevelRuneDataEnd(builder)
        return dict_string_listClzTorappuLegacyInLevelRuneData


class clz_Torappu_LevelData_GlobalBuffData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_GlobalBuffData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_GlobalBuffData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_GlobalBuffData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_GlobalBuffData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_GlobalBuffData
    def OverrideCameraEffect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_GlobalBuffData
    def PassProfessionMaskFlag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_GlobalBuffData
    def ProfessionMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_GlobalBuffData
    def PlayerSideMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_LevelData_GlobalBuffDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(overrideCameraEffect), 0)

def clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, passProfessionMaskFlag):
    builder.PrependBoolSlot(3, passProfessionMaskFlag, 0)

def clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, professionMask):
    builder.PrependInt32Slot(4, professionMask, 0)

def clz_Torappu_LevelData_GlobalBuffDataAddPlayerSideMask(builder, playerSideMask):
    builder.PrependUint8Slot(5, playerSideMask, 0)

def clz_Torappu_LevelData_GlobalBuffDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_GlobalBuffDataT(object):

    # clz_Torappu_LevelData_GlobalBuffDataT
    def __init__(self):
        self.prefabKey = None  # type: str
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]
        self.overrideCameraEffect = None  # type: str
        self.passProfessionMaskFlag = False  # type: bool
        self.professionMask = 0  # type: int
        self.playerSideMask = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataGlobalBuffData = clz_Torappu_LevelData_GlobalBuffData()
        clzTorappuLevelDataGlobalBuffData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataGlobalBuffData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataGlobalBuffData):
        x = clz_Torappu_LevelData_GlobalBuffDataT()
        x._UnPack(clzTorappuLevelDataGlobalBuffData)
        return x

    # clz_Torappu_LevelData_GlobalBuffDataT
    def _UnPack(self, clzTorappuLevelDataGlobalBuffData):
        if clzTorappuLevelDataGlobalBuffData is None:
            return
        self.prefabKey = clzTorappuLevelDataGlobalBuffData.PrefabKey()
        if not clzTorappuLevelDataGlobalBuffData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLevelDataGlobalBuffData.BlackboardLength()):
                if clzTorappuLevelDataGlobalBuffData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataGlobalBuffData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)
        self.overrideCameraEffect = clzTorappuLevelDataGlobalBuffData.OverrideCameraEffect()
        self.passProfessionMaskFlag = clzTorappuLevelDataGlobalBuffData.PassProfessionMaskFlag()
        self.professionMask = clzTorappuLevelDataGlobalBuffData.ProfessionMask()
        self.playerSideMask = clzTorappuLevelDataGlobalBuffData.PlayerSideMask()

    # clz_Torappu_LevelData_GlobalBuffDataT
    def Pack(self, builder):
        if self.prefabKey is not None:
            prefabKey = builder.CreateString(self.prefabKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LevelData_GlobalBuffDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        if self.overrideCameraEffect is not None:
            overrideCameraEffect = builder.CreateString(self.overrideCameraEffect)
        clz_Torappu_LevelData_GlobalBuffDataStart(builder)
        if self.prefabKey is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddPrefabKey(builder, prefabKey)
        if self.blackboard is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddBlackboard(builder, blackboard)
        if self.overrideCameraEffect is not None:
            clz_Torappu_LevelData_GlobalBuffDataAddOverrideCameraEffect(builder, overrideCameraEffect)
        clz_Torappu_LevelData_GlobalBuffDataAddPassProfessionMaskFlag(builder, self.passProfessionMaskFlag)
        clz_Torappu_LevelData_GlobalBuffDataAddProfessionMask(builder, self.professionMask)
        clz_Torappu_LevelData_GlobalBuffDataAddPlayerSideMask(builder, self.playerSideMask)
        clzTorappuLevelDataGlobalBuffData = clz_Torappu_LevelData_GlobalBuffDataEnd(builder)
        return clzTorappuLevelDataGlobalBuffData


class clz_UnityEngine_Vector2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_UnityEngine_Vector2()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_UnityEngine_Vector2(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_UnityEngine_Vector2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_UnityEngine_Vector2
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_UnityEngine_Vector2
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_UnityEngine_Vector2Start(builder):
    builder.StartObject(2)

def clz_UnityEngine_Vector2AddX(builder, x):
    builder.PrependFloat32Slot(0, x, 0.0)

def clz_UnityEngine_Vector2AddY(builder, y):
    builder.PrependFloat32Slot(1, y, 0.0)

def clz_UnityEngine_Vector2End(builder):
    return builder.EndObject()



class clz_UnityEngine_Vector2T(object):

    # clz_UnityEngine_Vector2T
    def __init__(self):
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzUnityEngineVector2 = clz_UnityEngine_Vector2()
        clzUnityEngineVector2.Init(buf, pos)
        return cls.InitFromObj(clzUnityEngineVector2)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzUnityEngineVector2):
        x = clz_UnityEngine_Vector2T()
        x._UnPack(clzUnityEngineVector2)
        return x

    # clz_UnityEngine_Vector2T
    def _UnPack(self, clzUnityEngineVector2):
        if clzUnityEngineVector2 is None:
            return
        self.x = clzUnityEngineVector2.X()
        self.y = clzUnityEngineVector2.Y()

    # clz_UnityEngine_Vector2T
    def Pack(self, builder):
        clz_UnityEngine_Vector2Start(builder)
        clz_UnityEngine_Vector2AddX(builder, self.x)
        clz_UnityEngine_Vector2AddY(builder, self.y)
        clzUnityEngineVector2 = clz_UnityEngine_Vector2End(builder)
        return clzUnityEngineVector2


class clz_Torappu_RouteData_CheckpointData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData_CheckpointData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData_CheckpointData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData_CheckpointData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData_CheckpointData
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData_CheckpointData
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_RouteData_CheckpointData
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def ReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData_CheckpointData
    def RandomizeReachOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData_CheckpointData
    def ReachDistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_RouteData_CheckpointDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_RouteData_CheckpointDataAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def clz_Torappu_RouteData_CheckpointDataAddTime(builder, time):
    builder.PrependFloat32Slot(1, time, 0.0)

def clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(reachOffset), 0)

def clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, randomizeReachOffset):
    builder.PrependBoolSlot(4, randomizeReachOffset, 0)

def clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, reachDistance):
    builder.PrependFloat32Slot(5, reachDistance, 0.0)

def clz_Torappu_RouteData_CheckpointDataEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class clz_Torappu_RouteData_CheckpointDataT(object):

    # clz_Torappu_RouteData_CheckpointDataT
    def __init__(self):
        self.type = 0  # type: int
        self.time = 0.0  # type: float
        self.position = None  # type: Optional[clz_Torappu_GridPositionT]
        self.reachOffset = None  # type: Optional[clz_UnityEngine_Vector2T]
        self.randomizeReachOffset = False  # type: bool
        self.reachDistance = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuRouteDataCheckpointData = clz_Torappu_RouteData_CheckpointData()
        clzTorappuRouteDataCheckpointData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuRouteDataCheckpointData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuRouteDataCheckpointData):
        x = clz_Torappu_RouteData_CheckpointDataT()
        x._UnPack(clzTorappuRouteDataCheckpointData)
        return x

    # clz_Torappu_RouteData_CheckpointDataT
    def _UnPack(self, clzTorappuRouteDataCheckpointData):
        if clzTorappuRouteDataCheckpointData is None:
            return
        self.type = clzTorappuRouteDataCheckpointData.Type()
        self.time = clzTorappuRouteDataCheckpointData.Time()
        if clzTorappuRouteDataCheckpointData.Position() is not None:
            self.position = clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteDataCheckpointData.Position())
        if clzTorappuRouteDataCheckpointData.ReachOffset() is not None:
            self.reachOffset = clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteDataCheckpointData.ReachOffset())
        self.randomizeReachOffset = clzTorappuRouteDataCheckpointData.RandomizeReachOffset()
        self.reachDistance = clzTorappuRouteDataCheckpointData.ReachDistance()

    # clz_Torappu_RouteData_CheckpointDataT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.reachOffset is not None:
            reachOffset = self.reachOffset.Pack(builder)
        clz_Torappu_RouteData_CheckpointDataStart(builder)
        clz_Torappu_RouteData_CheckpointDataAddType(builder, self.type)
        clz_Torappu_RouteData_CheckpointDataAddTime(builder, self.time)
        if self.position is not None:
            clz_Torappu_RouteData_CheckpointDataAddPosition(builder, position)
        if self.reachOffset is not None:
            clz_Torappu_RouteData_CheckpointDataAddReachOffset(builder, reachOffset)
        clz_Torappu_RouteData_CheckpointDataAddRandomizeReachOffset(builder, self.randomizeReachOffset)
        clz_Torappu_RouteData_CheckpointDataAddReachDistance(builder, self.reachDistance)
        clzTorappuRouteDataCheckpointData = clz_Torappu_RouteData_CheckpointDataEnd(builder)
        return clzTorappuRouteDataCheckpointData


class clz_Torappu_RouteData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_RouteData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_RouteData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_RouteData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_RouteData
    def MotionMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_RouteData
    def StartPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def EndPosition(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnRandomRange(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def SpawnOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_UnityEngine_Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def Checkpoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData_CheckpointData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_RouteData
    def CheckpointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_RouteData
    def CheckpointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_RouteData
    def AllowDiagonalMove(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryTileCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryNodeCenter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_RouteData
    def VisitEveryCheckPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_RouteDataStart(builder):
    builder.StartObject(10)

def clz_Torappu_RouteDataAddMotionMode(builder, motionMode):
    builder.PrependInt32Slot(0, motionMode, 0)

def clz_Torappu_RouteDataAddStartPosition(builder, startPosition):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(startPosition), 0)

def clz_Torappu_RouteDataAddEndPosition(builder, endPosition):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(endPosition), 0)

def clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(spawnRandomRange), 0)

def clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(spawnOffset), 0)

def clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(checkpoints), 0)

def clz_Torappu_RouteDataStartCheckpointsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_RouteDataAddAllowDiagonalMove(builder, allowDiagonalMove):
    builder.PrependBoolSlot(6, allowDiagonalMove, 0)

def clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, visitEveryTileCenter):
    builder.PrependBoolSlot(7, visitEveryTileCenter, 0)

def clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, visitEveryNodeCenter):
    builder.PrependBoolSlot(8, visitEveryNodeCenter, 0)

def clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, visitEveryCheckPoint):
    builder.PrependBoolSlot(9, visitEveryCheckPoint, 0)

def clz_Torappu_RouteDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_RouteDataT(object):

    # clz_Torappu_RouteDataT
    def __init__(self):
        self.motionMode = 0  # type: int
        self.startPosition = None  # type: Optional[clz_Torappu_GridPositionT]
        self.endPosition = None  # type: Optional[clz_Torappu_GridPositionT]
        self.spawnRandomRange = None  # type: Optional[clz_UnityEngine_Vector2T]
        self.spawnOffset = None  # type: Optional[clz_UnityEngine_Vector2T]
        self.checkpoints = None  # type: List[clz_Torappu_RouteData_CheckpointDataT]
        self.allowDiagonalMove = False  # type: bool
        self.visitEveryTileCenter = False  # type: bool
        self.visitEveryNodeCenter = False  # type: bool
        self.visitEveryCheckPoint = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuRouteData = clz_Torappu_RouteData()
        clzTorappuRouteData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuRouteData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuRouteData):
        x = clz_Torappu_RouteDataT()
        x._UnPack(clzTorappuRouteData)
        return x

    # clz_Torappu_RouteDataT
    def _UnPack(self, clzTorappuRouteData):
        if clzTorappuRouteData is None:
            return
        self.motionMode = clzTorappuRouteData.MotionMode()
        if clzTorappuRouteData.StartPosition() is not None:
            self.startPosition = clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteData.StartPosition())
        if clzTorappuRouteData.EndPosition() is not None:
            self.endPosition = clz_Torappu_GridPositionT.InitFromObj(clzTorappuRouteData.EndPosition())
        if clzTorappuRouteData.SpawnRandomRange() is not None:
            self.spawnRandomRange = clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteData.SpawnRandomRange())
        if clzTorappuRouteData.SpawnOffset() is not None:
            self.spawnOffset = clz_UnityEngine_Vector2T.InitFromObj(clzTorappuRouteData.SpawnOffset())
        if not clzTorappuRouteData.CheckpointsIsNone():
            self.checkpoints = []
            for i in range(clzTorappuRouteData.CheckpointsLength()):
                if clzTorappuRouteData.Checkpoints(i) is None:
                    self.checkpoints.append(None)
                else:
                    clz_Torappu_RouteData_CheckpointData_ = clz_Torappu_RouteData_CheckpointDataT.InitFromObj(clzTorappuRouteData.Checkpoints(i))
                    self.checkpoints.append(clz_Torappu_RouteData_CheckpointData_)
        self.allowDiagonalMove = clzTorappuRouteData.AllowDiagonalMove()
        self.visitEveryTileCenter = clzTorappuRouteData.VisitEveryTileCenter()
        self.visitEveryNodeCenter = clzTorappuRouteData.VisitEveryNodeCenter()
        self.visitEveryCheckPoint = clzTorappuRouteData.VisitEveryCheckPoint()

    # clz_Torappu_RouteDataT
    def Pack(self, builder):
        if self.startPosition is not None:
            startPosition = self.startPosition.Pack(builder)
        if self.endPosition is not None:
            endPosition = self.endPosition.Pack(builder)
        if self.spawnRandomRange is not None:
            spawnRandomRange = self.spawnRandomRange.Pack(builder)
        if self.spawnOffset is not None:
            spawnOffset = self.spawnOffset.Pack(builder)
        if self.checkpoints is not None:
            checkpointslist = []
            for i in range(len(self.checkpoints)):
                checkpointslist.append(self.checkpoints[i].Pack(builder))
            clz_Torappu_RouteDataStartCheckpointsVector(builder, len(self.checkpoints))
            for i in reversed(range(len(self.checkpoints))):
                builder.PrependUOffsetTRelative(checkpointslist[i])
            checkpoints = builder.EndVector()
        clz_Torappu_RouteDataStart(builder)
        clz_Torappu_RouteDataAddMotionMode(builder, self.motionMode)
        if self.startPosition is not None:
            clz_Torappu_RouteDataAddStartPosition(builder, startPosition)
        if self.endPosition is not None:
            clz_Torappu_RouteDataAddEndPosition(builder, endPosition)
        if self.spawnRandomRange is not None:
            clz_Torappu_RouteDataAddSpawnRandomRange(builder, spawnRandomRange)
        if self.spawnOffset is not None:
            clz_Torappu_RouteDataAddSpawnOffset(builder, spawnOffset)
        if self.checkpoints is not None:
            clz_Torappu_RouteDataAddCheckpoints(builder, checkpoints)
        clz_Torappu_RouteDataAddAllowDiagonalMove(builder, self.allowDiagonalMove)
        clz_Torappu_RouteDataAddVisitEveryTileCenter(builder, self.visitEveryTileCenter)
        clz_Torappu_RouteDataAddVisitEveryNodeCenter(builder, self.visitEveryNodeCenter)
        clz_Torappu_RouteDataAddVisitEveryCheckPoint(builder, self.visitEveryCheckPoint)
        clzTorappuRouteData = clz_Torappu_RouteDataEnd(builder)
        return clzTorappuRouteData


class clz_Torappu_AttributesData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_AttributesData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_AttributesData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_AttributesData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_AttributesData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def Def(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_AttributesData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MaxDeckStackCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_AttributesData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def PalsyImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_AttributesData
    def AttractImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_AttributesDataStart(builder):
    builder.StartObject(26)

def clz_Torappu_AttributesDataAddMaxHp(builder, maxHp):
    builder.PrependInt32Slot(0, maxHp, 0)

def clz_Torappu_AttributesDataAddAtk(builder, atk):
    builder.PrependInt32Slot(1, atk, 0)

def clz_Torappu_AttributesDataAddDef(builder, def_):
    builder.PrependInt32Slot(2, def_, 0)

def clz_Torappu_AttributesDataAddMagicResistance(builder, magicResistance):
    builder.PrependFloat32Slot(3, magicResistance, 0.0)

def clz_Torappu_AttributesDataAddCost(builder, cost):
    builder.PrependInt32Slot(4, cost, 0)

def clz_Torappu_AttributesDataAddBlockCnt(builder, blockCnt):
    builder.PrependInt32Slot(5, blockCnt, 0)

def clz_Torappu_AttributesDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependFloat32Slot(6, moveSpeed, 0.0)

def clz_Torappu_AttributesDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependFloat32Slot(7, attackSpeed, 0.0)

def clz_Torappu_AttributesDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependFloat32Slot(8, baseAttackTime, 0.0)

def clz_Torappu_AttributesDataAddRespawnTime(builder, respawnTime):
    builder.PrependInt32Slot(9, respawnTime, 0)

def clz_Torappu_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependFloat32Slot(10, hpRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependFloat32Slot(11, spRecoveryPerSec, 0.0)

def clz_Torappu_AttributesDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependInt32Slot(12, maxDeployCount, 0)

def clz_Torappu_AttributesDataAddMaxDeckStackCnt(builder, maxDeckStackCnt):
    builder.PrependInt32Slot(13, maxDeckStackCnt, 0)

def clz_Torappu_AttributesDataAddTauntLevel(builder, tauntLevel):
    builder.PrependInt32Slot(14, tauntLevel, 0)

def clz_Torappu_AttributesDataAddMassLevel(builder, massLevel):
    builder.PrependInt32Slot(15, massLevel, 0)

def clz_Torappu_AttributesDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependInt32Slot(16, baseForceLevel, 0)

def clz_Torappu_AttributesDataAddStunImmune(builder, stunImmune):
    builder.PrependBoolSlot(17, stunImmune, 0)

def clz_Torappu_AttributesDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependBoolSlot(18, silenceImmune, 0)

def clz_Torappu_AttributesDataAddSleepImmune(builder, sleepImmune):
    builder.PrependBoolSlot(19, sleepImmune, 0)

def clz_Torappu_AttributesDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependBoolSlot(20, frozenImmune, 0)

def clz_Torappu_AttributesDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependBoolSlot(21, levitateImmune, 0)

def clz_Torappu_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependBoolSlot(22, disarmedCombatImmune, 0)

def clz_Torappu_AttributesDataAddFearedImmune(builder, fearedImmune):
    builder.PrependBoolSlot(23, fearedImmune, 0)

def clz_Torappu_AttributesDataAddPalsyImmune(builder, palsyImmune):
    builder.PrependBoolSlot(24, palsyImmune, 0)

def clz_Torappu_AttributesDataAddAttractImmune(builder, attractImmune):
    builder.PrependBoolSlot(25, attractImmune, 0)

def clz_Torappu_AttributesDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_AttributesDataT(object):

    # clz_Torappu_AttributesDataT
    def __init__(self):
        self.maxHp = 0  # type: int
        self.atk = 0  # type: int
        self.def_ = 0  # type: int
        self.magicResistance = 0.0  # type: float
        self.cost = 0  # type: int
        self.blockCnt = 0  # type: int
        self.moveSpeed = 0.0  # type: float
        self.attackSpeed = 0.0  # type: float
        self.baseAttackTime = 0.0  # type: float
        self.respawnTime = 0  # type: int
        self.hpRecoveryPerSec = 0.0  # type: float
        self.spRecoveryPerSec = 0.0  # type: float
        self.maxDeployCount = 0  # type: int
        self.maxDeckStackCnt = 0  # type: int
        self.tauntLevel = 0  # type: int
        self.massLevel = 0  # type: int
        self.baseForceLevel = 0  # type: int
        self.stunImmune = False  # type: bool
        self.silenceImmune = False  # type: bool
        self.sleepImmune = False  # type: bool
        self.frozenImmune = False  # type: bool
        self.levitateImmune = False  # type: bool
        self.disarmedCombatImmune = False  # type: bool
        self.fearedImmune = False  # type: bool
        self.palsyImmune = False  # type: bool
        self.attractImmune = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuAttributesData = clz_Torappu_AttributesData()
        clzTorappuAttributesData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuAttributesData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuAttributesData):
        x = clz_Torappu_AttributesDataT()
        x._UnPack(clzTorappuAttributesData)
        return x

    # clz_Torappu_AttributesDataT
    def _UnPack(self, clzTorappuAttributesData):
        if clzTorappuAttributesData is None:
            return
        self.maxHp = clzTorappuAttributesData.MaxHp()
        self.atk = clzTorappuAttributesData.Atk()
        self.def_ = clzTorappuAttributesData.Def()
        self.magicResistance = clzTorappuAttributesData.MagicResistance()
        self.cost = clzTorappuAttributesData.Cost()
        self.blockCnt = clzTorappuAttributesData.BlockCnt()
        self.moveSpeed = clzTorappuAttributesData.MoveSpeed()
        self.attackSpeed = clzTorappuAttributesData.AttackSpeed()
        self.baseAttackTime = clzTorappuAttributesData.BaseAttackTime()
        self.respawnTime = clzTorappuAttributesData.RespawnTime()
        self.hpRecoveryPerSec = clzTorappuAttributesData.HpRecoveryPerSec()
        self.spRecoveryPerSec = clzTorappuAttributesData.SpRecoveryPerSec()
        self.maxDeployCount = clzTorappuAttributesData.MaxDeployCount()
        self.maxDeckStackCnt = clzTorappuAttributesData.MaxDeckStackCnt()
        self.tauntLevel = clzTorappuAttributesData.TauntLevel()
        self.massLevel = clzTorappuAttributesData.MassLevel()
        self.baseForceLevel = clzTorappuAttributesData.BaseForceLevel()
        self.stunImmune = clzTorappuAttributesData.StunImmune()
        self.silenceImmune = clzTorappuAttributesData.SilenceImmune()
        self.sleepImmune = clzTorappuAttributesData.SleepImmune()
        self.frozenImmune = clzTorappuAttributesData.FrozenImmune()
        self.levitateImmune = clzTorappuAttributesData.LevitateImmune()
        self.disarmedCombatImmune = clzTorappuAttributesData.DisarmedCombatImmune()
        self.fearedImmune = clzTorappuAttributesData.FearedImmune()
        self.palsyImmune = clzTorappuAttributesData.PalsyImmune()
        self.attractImmune = clzTorappuAttributesData.AttractImmune()

    # clz_Torappu_AttributesDataT
    def Pack(self, builder):
        clz_Torappu_AttributesDataStart(builder)
        clz_Torappu_AttributesDataAddMaxHp(builder, self.maxHp)
        clz_Torappu_AttributesDataAddAtk(builder, self.atk)
        clz_Torappu_AttributesDataAddDef(builder, self.def_)
        clz_Torappu_AttributesDataAddMagicResistance(builder, self.magicResistance)
        clz_Torappu_AttributesDataAddCost(builder, self.cost)
        clz_Torappu_AttributesDataAddBlockCnt(builder, self.blockCnt)
        clz_Torappu_AttributesDataAddMoveSpeed(builder, self.moveSpeed)
        clz_Torappu_AttributesDataAddAttackSpeed(builder, self.attackSpeed)
        clz_Torappu_AttributesDataAddBaseAttackTime(builder, self.baseAttackTime)
        clz_Torappu_AttributesDataAddRespawnTime(builder, self.respawnTime)
        clz_Torappu_AttributesDataAddHpRecoveryPerSec(builder, self.hpRecoveryPerSec)
        clz_Torappu_AttributesDataAddSpRecoveryPerSec(builder, self.spRecoveryPerSec)
        clz_Torappu_AttributesDataAddMaxDeployCount(builder, self.maxDeployCount)
        clz_Torappu_AttributesDataAddMaxDeckStackCnt(builder, self.maxDeckStackCnt)
        clz_Torappu_AttributesDataAddTauntLevel(builder, self.tauntLevel)
        clz_Torappu_AttributesDataAddMassLevel(builder, self.massLevel)
        clz_Torappu_AttributesDataAddBaseForceLevel(builder, self.baseForceLevel)
        clz_Torappu_AttributesDataAddStunImmune(builder, self.stunImmune)
        clz_Torappu_AttributesDataAddSilenceImmune(builder, self.silenceImmune)
        clz_Torappu_AttributesDataAddSleepImmune(builder, self.sleepImmune)
        clz_Torappu_AttributesDataAddFrozenImmune(builder, self.frozenImmune)
        clz_Torappu_AttributesDataAddLevitateImmune(builder, self.levitateImmune)
        clz_Torappu_AttributesDataAddDisarmedCombatImmune(builder, self.disarmedCombatImmune)
        clz_Torappu_AttributesDataAddFearedImmune(builder, self.fearedImmune)
        clz_Torappu_AttributesDataAddPalsyImmune(builder, self.palsyImmune)
        clz_Torappu_AttributesDataAddAttractImmune(builder, self.attractImmune)
        clzTorappuAttributesData = clz_Torappu_AttributesDataEnd(builder)
        return clzTorappuAttributesData


class clz_Torappu_LevelData_EnemyData_ESkillData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_ESkillData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_ESkillData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Cooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def InitCooldown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def SpCost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def Blackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESkillData
    def BlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder):
    builder.StartObject(6)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, priority):
    builder.PrependInt32Slot(1, priority, 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, cooldown):
    builder.PrependFloat32Slot(2, cooldown, 0.0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, initCooldown):
    builder.PrependFloat32Slot(3, initCooldown, 0.0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, spCost):
    builder.PrependInt32Slot(4, spCost, 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blackboard), 0)

def clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_EnemyData_ESkillDataT(object):

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def __init__(self):
        self.prefabKey = None  # type: str
        self.priority = 0  # type: int
        self.cooldown = 0.0  # type: float
        self.initCooldown = 0.0  # type: float
        self.spCost = 0  # type: int
        self.blackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyDataEskillData = clz_Torappu_LevelData_EnemyData_ESkillData()
        clzTorappuLevelDataEnemyDataEskillData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyDataEskillData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyDataEskillData):
        x = clz_Torappu_LevelData_EnemyData_ESkillDataT()
        x._UnPack(clzTorappuLevelDataEnemyDataEskillData)
        return x

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def _UnPack(self, clzTorappuLevelDataEnemyDataEskillData):
        if clzTorappuLevelDataEnemyDataEskillData is None:
            return
        self.prefabKey = clzTorappuLevelDataEnemyDataEskillData.PrefabKey()
        self.priority = clzTorappuLevelDataEnemyDataEskillData.Priority()
        self.cooldown = clzTorappuLevelDataEnemyDataEskillData.Cooldown()
        self.initCooldown = clzTorappuLevelDataEnemyDataEskillData.InitCooldown()
        self.spCost = clzTorappuLevelDataEnemyDataEskillData.SpCost()
        if not clzTorappuLevelDataEnemyDataEskillData.BlackboardIsNone():
            self.blackboard = []
            for i in range(clzTorappuLevelDataEnemyDataEskillData.BlackboardLength()):
                if clzTorappuLevelDataEnemyDataEskillData.Blackboard(i) is None:
                    self.blackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataEnemyDataEskillData.Blackboard(i))
                    self.blackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_EnemyData_ESkillDataT
    def Pack(self, builder):
        if self.prefabKey is not None:
            prefabKey = builder.CreateString(self.prefabKey)
        if self.blackboard is not None:
            blackboardlist = []
            for i in range(len(self.blackboard)):
                blackboardlist.append(self.blackboard[i].Pack(builder))
            clz_Torappu_LevelData_EnemyData_ESkillDataStartBlackboardVector(builder, len(self.blackboard))
            for i in reversed(range(len(self.blackboard))):
                builder.PrependUOffsetTRelative(blackboardlist[i])
            blackboard = builder.EndVector()
        clz_Torappu_LevelData_EnemyData_ESkillDataStart(builder)
        if self.prefabKey is not None:
            clz_Torappu_LevelData_EnemyData_ESkillDataAddPrefabKey(builder, prefabKey)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddPriority(builder, self.priority)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddCooldown(builder, self.cooldown)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddInitCooldown(builder, self.initCooldown)
        clz_Torappu_LevelData_EnemyData_ESkillDataAddSpCost(builder, self.spCost)
        if self.blackboard is not None:
            clz_Torappu_LevelData_EnemyData_ESkillDataAddBlackboard(builder, blackboard)
        clzTorappuLevelDataEnemyDataEskillData = clz_Torappu_LevelData_EnemyData_ESkillDataEnd(builder)
        return clzTorappuLevelDataEnemyDataEskillData


class clz_Torappu_LevelData_EnemyData_ESpData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData_ESpData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData_ESpData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData_ESpData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData_ESpData
    def SpType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def MaxSp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def InitSp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData_ESpData
    def Increment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_LevelData_EnemyData_ESpDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_EnemyData_ESpDataAddSpType(builder, spType):
    builder.PrependInt32Slot(0, spType, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddMaxSp(builder, maxSp):
    builder.PrependInt32Slot(1, maxSp, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddInitSp(builder, initSp):
    builder.PrependInt32Slot(2, initSp, 0)

def clz_Torappu_LevelData_EnemyData_ESpDataAddIncrement(builder, increment):
    builder.PrependFloat32Slot(3, increment, 0.0)

def clz_Torappu_LevelData_EnemyData_ESpDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_EnemyData_ESpDataT(object):

    # clz_Torappu_LevelData_EnemyData_ESpDataT
    def __init__(self):
        self.spType = 0  # type: int
        self.maxSp = 0  # type: int
        self.initSp = 0  # type: int
        self.increment = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyDataEspData = clz_Torappu_LevelData_EnemyData_ESpData()
        clzTorappuLevelDataEnemyDataEspData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyDataEspData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyDataEspData):
        x = clz_Torappu_LevelData_EnemyData_ESpDataT()
        x._UnPack(clzTorappuLevelDataEnemyDataEspData)
        return x

    # clz_Torappu_LevelData_EnemyData_ESpDataT
    def _UnPack(self, clzTorappuLevelDataEnemyDataEspData):
        if clzTorappuLevelDataEnemyDataEspData is None:
            return
        self.spType = clzTorappuLevelDataEnemyDataEspData.SpType()
        self.maxSp = clzTorappuLevelDataEnemyDataEspData.MaxSp()
        self.initSp = clzTorappuLevelDataEnemyDataEspData.InitSp()
        self.increment = clzTorappuLevelDataEnemyDataEspData.Increment()

    # clz_Torappu_LevelData_EnemyData_ESpDataT
    def Pack(self, builder):
        clz_Torappu_LevelData_EnemyData_ESpDataStart(builder)
        clz_Torappu_LevelData_EnemyData_ESpDataAddSpType(builder, self.spType)
        clz_Torappu_LevelData_EnemyData_ESpDataAddMaxSp(builder, self.maxSp)
        clz_Torappu_LevelData_EnemyData_ESpDataAddInitSp(builder, self.initSp)
        clz_Torappu_LevelData_EnemyData_ESpDataAddIncrement(builder, self.increment)
        clzTorappuLevelDataEnemyDataEspData = clz_Torappu_LevelData_EnemyData_ESpDataEnd(builder)
        return clzTorappuLevelDataEnemyDataEspData


class clz_Torappu_LevelData_EnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def ApplyWay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def EnemyTagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def NotCountInTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_EnemyData
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyData
    def LifePointReduce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def RangeRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def NumOfExtraDrops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_EnemyData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def TalentBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData_ESkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_EnemyData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_EnemyData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_LevelData_EnemyData
    def SpData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_EnemyData_ESpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_EnemyDataStart(builder):
    builder.StartObject(17)

def clz_Torappu_LevelData_EnemyDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_LevelData_EnemyDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_LevelData_EnemyDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, applyWay):
    builder.PrependInt32Slot(4, applyWay, 0)

def clz_Torappu_LevelData_EnemyDataAddMotion(builder, motion):
    builder.PrependInt32Slot(5, motion, 0)

def clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyTags), 0)

def clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, notCountInTotal):
    builder.PrependBoolSlot(7, notCountInTotal, 0)

def clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, lifePointReduce):
    builder.PrependInt32Slot(9, lifePointReduce, 0)

def clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, rangeRadius):
    builder.PrependFloat32Slot(10, rangeRadius, 0.0)

def clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops):
    builder.PrependInt32Slot(11, numOfExtraDrops, 0)

def clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, viewRadius):
    builder.PrependFloat32Slot(12, viewRadius, 0.0)

def clz_Torappu_LevelData_EnemyDataAddLevelType(builder, levelType):
    builder.PrependInt32Slot(13, levelType, 0)

def clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(talentBlackboard), 0)

def clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(spData), 0)

def clz_Torappu_LevelData_EnemyDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_EnemyDataT(object):

    # clz_Torappu_LevelData_EnemyDataT
    def __init__(self):
        self.name = None  # type: str
        self.description = None  # type: str
        self.key = None  # type: str
        self.attributes = None  # type: Optional[clz_Torappu_AttributesDataT]
        self.applyWay = 0  # type: int
        self.motion = 0  # type: int
        self.enemyTags = None  # type: List[str]
        self.notCountInTotal = False  # type: bool
        self.alias = None  # type: str
        self.lifePointReduce = 0  # type: int
        self.rangeRadius = 0.0  # type: float
        self.numOfExtraDrops = 0  # type: int
        self.viewRadius = 0.0  # type: float
        self.levelType = 0  # type: int
        self.talentBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]
        self.skills = None  # type: List[clz_Torappu_LevelData_EnemyData_ESkillDataT]
        self.spData = None  # type: Optional[clz_Torappu_LevelData_EnemyData_ESpDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyData = clz_Torappu_LevelData_EnemyData()
        clzTorappuLevelDataEnemyData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyData):
        x = clz_Torappu_LevelData_EnemyDataT()
        x._UnPack(clzTorappuLevelDataEnemyData)
        return x

    # clz_Torappu_LevelData_EnemyDataT
    def _UnPack(self, clzTorappuLevelDataEnemyData):
        if clzTorappuLevelDataEnemyData is None:
            return
        self.name = clzTorappuLevelDataEnemyData.Name()
        self.description = clzTorappuLevelDataEnemyData.Description()
        self.key = clzTorappuLevelDataEnemyData.Key()
        if clzTorappuLevelDataEnemyData.Attributes() is not None:
            self.attributes = clz_Torappu_AttributesDataT.InitFromObj(clzTorappuLevelDataEnemyData.Attributes())
        self.applyWay = clzTorappuLevelDataEnemyData.ApplyWay()
        self.motion = clzTorappuLevelDataEnemyData.Motion()
        if not clzTorappuLevelDataEnemyData.EnemyTagsIsNone():
            self.enemyTags = []
            for i in range(clzTorappuLevelDataEnemyData.EnemyTagsLength()):
                self.enemyTags.append(clzTorappuLevelDataEnemyData.EnemyTags(i))
        self.notCountInTotal = clzTorappuLevelDataEnemyData.NotCountInTotal()
        self.alias = clzTorappuLevelDataEnemyData.Alias()
        self.lifePointReduce = clzTorappuLevelDataEnemyData.LifePointReduce()
        self.rangeRadius = clzTorappuLevelDataEnemyData.RangeRadius()
        self.numOfExtraDrops = clzTorappuLevelDataEnemyData.NumOfExtraDrops()
        self.viewRadius = clzTorappuLevelDataEnemyData.ViewRadius()
        self.levelType = clzTorappuLevelDataEnemyData.LevelType()
        if not clzTorappuLevelDataEnemyData.TalentBlackboardIsNone():
            self.talentBlackboard = []
            for i in range(clzTorappuLevelDataEnemyData.TalentBlackboardLength()):
                if clzTorappuLevelDataEnemyData.TalentBlackboard(i) is None:
                    self.talentBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataEnemyData.TalentBlackboard(i))
                    self.talentBlackboard.append(clz_Torappu_Blackboard_DataPair_)
        if not clzTorappuLevelDataEnemyData.SkillsIsNone():
            self.skills = []
            for i in range(clzTorappuLevelDataEnemyData.SkillsLength()):
                if clzTorappuLevelDataEnemyData.Skills(i) is None:
                    self.skills.append(None)
                else:
                    clz_Torappu_LevelData_EnemyData_ESkillData_ = clz_Torappu_LevelData_EnemyData_ESkillDataT.InitFromObj(clzTorappuLevelDataEnemyData.Skills(i))
                    self.skills.append(clz_Torappu_LevelData_EnemyData_ESkillData_)
        if clzTorappuLevelDataEnemyData.SpData() is not None:
            self.spData = clz_Torappu_LevelData_EnemyData_ESpDataT.InitFromObj(clzTorappuLevelDataEnemyData.SpData())

    # clz_Torappu_LevelData_EnemyDataT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.attributes is not None:
            attributes = self.attributes.Pack(builder)
        if self.enemyTags is not None:
            enemyTagslist = []
            for i in range(len(self.enemyTags)):
                enemyTagslist.append(builder.CreateString(self.enemyTags[i]))
            clz_Torappu_LevelData_EnemyDataStartEnemyTagsVector(builder, len(self.enemyTags))
            for i in reversed(range(len(self.enemyTags))):
                builder.PrependUOffsetTRelative(enemyTagslist[i])
            enemyTags = builder.EndVector()
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.talentBlackboard is not None:
            talentBlackboardlist = []
            for i in range(len(self.talentBlackboard)):
                talentBlackboardlist.append(self.talentBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_EnemyDataStartTalentBlackboardVector(builder, len(self.talentBlackboard))
            for i in reversed(range(len(self.talentBlackboard))):
                builder.PrependUOffsetTRelative(talentBlackboardlist[i])
            talentBlackboard = builder.EndVector()
        if self.skills is not None:
            skillslist = []
            for i in range(len(self.skills)):
                skillslist.append(self.skills[i].Pack(builder))
            clz_Torappu_LevelData_EnemyDataStartSkillsVector(builder, len(self.skills))
            for i in reversed(range(len(self.skills))):
                builder.PrependUOffsetTRelative(skillslist[i])
            skills = builder.EndVector()
        if self.spData is not None:
            spData = self.spData.Pack(builder)
        clz_Torappu_LevelData_EnemyDataStart(builder)
        if self.name is not None:
            clz_Torappu_LevelData_EnemyDataAddName(builder, name)
        if self.description is not None:
            clz_Torappu_LevelData_EnemyDataAddDescription(builder, description)
        if self.key is not None:
            clz_Torappu_LevelData_EnemyDataAddKey(builder, key)
        if self.attributes is not None:
            clz_Torappu_LevelData_EnemyDataAddAttributes(builder, attributes)
        clz_Torappu_LevelData_EnemyDataAddApplyWay(builder, self.applyWay)
        clz_Torappu_LevelData_EnemyDataAddMotion(builder, self.motion)
        if self.enemyTags is not None:
            clz_Torappu_LevelData_EnemyDataAddEnemyTags(builder, enemyTags)
        clz_Torappu_LevelData_EnemyDataAddNotCountInTotal(builder, self.notCountInTotal)
        if self.alias is not None:
            clz_Torappu_LevelData_EnemyDataAddAlias(builder, alias)
        clz_Torappu_LevelData_EnemyDataAddLifePointReduce(builder, self.lifePointReduce)
        clz_Torappu_LevelData_EnemyDataAddRangeRadius(builder, self.rangeRadius)
        clz_Torappu_LevelData_EnemyDataAddNumOfExtraDrops(builder, self.numOfExtraDrops)
        clz_Torappu_LevelData_EnemyDataAddViewRadius(builder, self.viewRadius)
        clz_Torappu_LevelData_EnemyDataAddLevelType(builder, self.levelType)
        if self.talentBlackboard is not None:
            clz_Torappu_LevelData_EnemyDataAddTalentBlackboard(builder, talentBlackboard)
        if self.skills is not None:
            clz_Torappu_LevelData_EnemyDataAddSkills(builder, skills)
        if self.spData is not None:
            clz_Torappu_LevelData_EnemyDataAddSpData(builder, spData)
        clzTorappuLevelDataEnemyData = clz_Torappu_LevelData_EnemyDataEnd(builder)
        return clzTorappuLevelDataEnemyData


class clz_Torappu_Undefinable_1_System_String_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_String_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_String_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_String_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_String_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_String_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_Undefinable_1_System_String_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_String_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_String_AddMValue(builder, mValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mValue), 0)

def clz_Torappu_Undefinable_1_System_String_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_String_T(object):

    # clz_Torappu_Undefinable_1_System_String_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemString_ = clz_Torappu_Undefinable_1_System_String_()
        clzTorappuUndefinable1SystemString_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemString_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemString_):
        x = clz_Torappu_Undefinable_1_System_String_T()
        x._UnPack(clzTorappuUndefinable1SystemString_)
        return x

    # clz_Torappu_Undefinable_1_System_String_T
    def _UnPack(self, clzTorappuUndefinable1SystemString_):
        if clzTorappuUndefinable1SystemString_ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemString_.MDefined()
        self.mValue = clzTorappuUndefinable1SystemString_.MValue()

    # clz_Torappu_Undefinable_1_System_String_T
    def Pack(self, builder):
        if self.mValue is not None:
            mValue = builder.CreateString(self.mValue)
        clz_Torappu_Undefinable_1_System_String_Start(builder)
        clz_Torappu_Undefinable_1_System_String_AddMDefined(builder, self.mDefined)
        if self.mValue is not None:
            clz_Torappu_Undefinable_1_System_String_AddMValue(builder, mValue)
        clzTorappuUndefinable1SystemString_ = clz_Torappu_Undefinable_1_System_String_End(builder)
        return clzTorappuUndefinable1SystemString_


class clz_Torappu_Undefinable_1_System_Int32_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Int32_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Int32_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Int32_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Int32_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Int32_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_System_Int32_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Int32_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Int32_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_System_Int32_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Int32_T(object):

    # clz_Torappu_Undefinable_1_System_Int32_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemInt32_ = clz_Torappu_Undefinable_1_System_Int32_()
        clzTorappuUndefinable1SystemInt32_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemInt32_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemInt32_):
        x = clz_Torappu_Undefinable_1_System_Int32_T()
        x._UnPack(clzTorappuUndefinable1SystemInt32_)
        return x

    # clz_Torappu_Undefinable_1_System_Int32_T
    def _UnPack(self, clzTorappuUndefinable1SystemInt32_):
        if clzTorappuUndefinable1SystemInt32_ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemInt32_.MDefined()
        self.mValue = clzTorappuUndefinable1SystemInt32_.MValue()

    # clz_Torappu_Undefinable_1_System_Int32_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_System_Int32_Start(builder)
        clz_Torappu_Undefinable_1_System_Int32_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_System_Int32_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1SystemInt32_ = clz_Torappu_Undefinable_1_System_Int32_End(builder)
        return clzTorappuUndefinable1SystemInt32_


class clz_Torappu_Undefinable_1_System_Single_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Single_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Single_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Single_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Single_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Single_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def clz_Torappu_Undefinable_1_System_Single_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Single_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Single_AddMValue(builder, mValue):
    builder.PrependFloat32Slot(1, mValue, 0.0)

def clz_Torappu_Undefinable_1_System_Single_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Single_T(object):

    # clz_Torappu_Undefinable_1_System_Single_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemSingle_ = clz_Torappu_Undefinable_1_System_Single_()
        clzTorappuUndefinable1SystemSingle_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemSingle_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemSingle_):
        x = clz_Torappu_Undefinable_1_System_Single_T()
        x._UnPack(clzTorappuUndefinable1SystemSingle_)
        return x

    # clz_Torappu_Undefinable_1_System_Single_T
    def _UnPack(self, clzTorappuUndefinable1SystemSingle_):
        if clzTorappuUndefinable1SystemSingle_ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemSingle_.MDefined()
        self.mValue = clzTorappuUndefinable1SystemSingle_.MValue()

    # clz_Torappu_Undefinable_1_System_Single_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_System_Single_Start(builder)
        clz_Torappu_Undefinable_1_System_Single_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_System_Single_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1SystemSingle_ = clz_Torappu_Undefinable_1_System_Single_End(builder)
        return clzTorappuUndefinable1SystemSingle_


class clz_Torappu_Undefinable_1_System_Boolean_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_Boolean_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_Boolean_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_Boolean_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_Boolean_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_Boolean_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_Undefinable_1_System_Boolean_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_Boolean_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_Boolean_AddMValue(builder, mValue):
    builder.PrependBoolSlot(1, mValue, 0)

def clz_Torappu_Undefinable_1_System_Boolean_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_System_Boolean_T(object):

    # clz_Torappu_Undefinable_1_System_Boolean_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemBoolean_ = clz_Torappu_Undefinable_1_System_Boolean_()
        clzTorappuUndefinable1SystemBoolean_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemBoolean_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemBoolean_):
        x = clz_Torappu_Undefinable_1_System_Boolean_T()
        x._UnPack(clzTorappuUndefinable1SystemBoolean_)
        return x

    # clz_Torappu_Undefinable_1_System_Boolean_T
    def _UnPack(self, clzTorappuUndefinable1SystemBoolean_):
        if clzTorappuUndefinable1SystemBoolean_ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemBoolean_.MDefined()
        self.mValue = clzTorappuUndefinable1SystemBoolean_.MValue()

    # clz_Torappu_Undefinable_1_System_Boolean_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_System_Boolean_Start(builder)
        clz_Torappu_Undefinable_1_System_Boolean_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_System_Boolean_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1SystemBoolean_ = clz_Torappu_Undefinable_1_System_Boolean_End(builder)
        return clzTorappuUndefinable1SystemBoolean_


class clz_Torappu_EnemyDatabase_AttributesData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EnemyDatabase_AttributesData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EnemyDatabase_AttributesData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EnemyDatabase_AttributesData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EnemyDatabase_AttributesData
    def MaxHp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Atk(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Def(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MagicResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def Cost(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BlockCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MoveSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def AttackSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BaseAttackTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def RespawnTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def HpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SpRecoveryPerSec(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MaxDeployCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def MassLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def BaseForceLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def TauntLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def EpDamageResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def EpResistance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DamageHitratePhysical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DamageHitrateMagical(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def EpBreakRecoverSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def StunImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SilenceImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def SleepImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def FrozenImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def LevitateImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def DisarmedCombatImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def FearedImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def PalsyImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_AttributesData
    def AttractImmune(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_EnemyDatabase_AttributesDataStart(builder):
    builder.StartObject(30)

def clz_Torappu_EnemyDatabase_AttributesDataAddMaxHp(builder, maxHp):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(maxHp), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddAtk(builder, atk):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(atk), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDef(builder, def_):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(def_), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMagicResistance(builder, magicResistance):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(magicResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddCost(builder, cost):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(cost), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBlockCnt(builder, blockCnt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(blockCnt), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMoveSpeed(builder, moveSpeed):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(moveSpeed), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddAttackSpeed(builder, attackSpeed):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(attackSpeed), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBaseAttackTime(builder, baseAttackTime):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(baseAttackTime), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddRespawnTime(builder, respawnTime):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(respawnTime), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(hpRecoveryPerSec), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(spRecoveryPerSec), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMaxDeployCount(builder, maxDeployCount):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(maxDeployCount), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddMassLevel(builder, massLevel):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(massLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddBaseForceLevel(builder, baseForceLevel):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(baseForceLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddTauntLevel(builder, tauntLevel):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(tauntLevel), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddEpDamageResistance(builder, epDamageResistance):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(epDamageResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddEpResistance(builder, epResistance):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(epResistance), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitratePhysical(builder, damageHitratePhysical):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(damageHitratePhysical), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitrateMagical(builder, damageHitrateMagical):
    builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(damageHitrateMagical), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddEpBreakRecoverSpeed(builder, epBreakRecoverSpeed):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(epBreakRecoverSpeed), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddStunImmune(builder, stunImmune):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(stunImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSilenceImmune(builder, silenceImmune):
    builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(silenceImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddSleepImmune(builder, sleepImmune):
    builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(sleepImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddFrozenImmune(builder, frozenImmune):
    builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(frozenImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddLevitateImmune(builder, levitateImmune):
    builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(levitateImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune):
    builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(disarmedCombatImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddFearedImmune(builder, fearedImmune):
    builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(fearedImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddPalsyImmune(builder, palsyImmune):
    builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(palsyImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataAddAttractImmune(builder, attractImmune):
    builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(attractImmune), 0)

def clz_Torappu_EnemyDatabase_AttributesDataEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class clz_Torappu_EnemyDatabase_AttributesDataT(object):

    # clz_Torappu_EnemyDatabase_AttributesDataT
    def __init__(self):
        self.maxHp = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.atk = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.def_ = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.magicResistance = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.cost = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.blockCnt = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.moveSpeed = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.attackSpeed = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.baseAttackTime = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.respawnTime = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.hpRecoveryPerSec = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.spRecoveryPerSec = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.maxDeployCount = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.massLevel = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.baseForceLevel = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.tauntLevel = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.epDamageResistance = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.epResistance = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.damageHitratePhysical = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.damageHitrateMagical = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.epBreakRecoverSpeed = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.stunImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.silenceImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.sleepImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.frozenImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.levitateImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.disarmedCombatImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.fearedImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.palsyImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.attractImmune = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuEnemyDatabaseAttributesData = clz_Torappu_EnemyDatabase_AttributesData()
        clzTorappuEnemyDatabaseAttributesData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuEnemyDatabaseAttributesData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuEnemyDatabaseAttributesData):
        x = clz_Torappu_EnemyDatabase_AttributesDataT()
        x._UnPack(clzTorappuEnemyDatabaseAttributesData)
        return x

    # clz_Torappu_EnemyDatabase_AttributesDataT
    def _UnPack(self, clzTorappuEnemyDatabaseAttributesData):
        if clzTorappuEnemyDatabaseAttributesData is None:
            return
        if clzTorappuEnemyDatabaseAttributesData.MaxHp() is not None:
            self.maxHp = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.MaxHp())
        if clzTorappuEnemyDatabaseAttributesData.Atk() is not None:
            self.atk = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.Atk())
        if clzTorappuEnemyDatabaseAttributesData.Def() is not None:
            self.def_ = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.Def())
        if clzTorappuEnemyDatabaseAttributesData.MagicResistance() is not None:
            self.magicResistance = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.MagicResistance())
        if clzTorappuEnemyDatabaseAttributesData.Cost() is not None:
            self.cost = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.Cost())
        if clzTorappuEnemyDatabaseAttributesData.BlockCnt() is not None:
            self.blockCnt = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.BlockCnt())
        if clzTorappuEnemyDatabaseAttributesData.MoveSpeed() is not None:
            self.moveSpeed = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.MoveSpeed())
        if clzTorappuEnemyDatabaseAttributesData.AttackSpeed() is not None:
            self.attackSpeed = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.AttackSpeed())
        if clzTorappuEnemyDatabaseAttributesData.BaseAttackTime() is not None:
            self.baseAttackTime = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.BaseAttackTime())
        if clzTorappuEnemyDatabaseAttributesData.RespawnTime() is not None:
            self.respawnTime = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.RespawnTime())
        if clzTorappuEnemyDatabaseAttributesData.HpRecoveryPerSec() is not None:
            self.hpRecoveryPerSec = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.HpRecoveryPerSec())
        if clzTorappuEnemyDatabaseAttributesData.SpRecoveryPerSec() is not None:
            self.spRecoveryPerSec = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.SpRecoveryPerSec())
        if clzTorappuEnemyDatabaseAttributesData.MaxDeployCount() is not None:
            self.maxDeployCount = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.MaxDeployCount())
        if clzTorappuEnemyDatabaseAttributesData.MassLevel() is not None:
            self.massLevel = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.MassLevel())
        if clzTorappuEnemyDatabaseAttributesData.BaseForceLevel() is not None:
            self.baseForceLevel = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.BaseForceLevel())
        if clzTorappuEnemyDatabaseAttributesData.TauntLevel() is not None:
            self.tauntLevel = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.TauntLevel())
        if clzTorappuEnemyDatabaseAttributesData.EpDamageResistance() is not None:
            self.epDamageResistance = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.EpDamageResistance())
        if clzTorappuEnemyDatabaseAttributesData.EpResistance() is not None:
            self.epResistance = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.EpResistance())
        if clzTorappuEnemyDatabaseAttributesData.DamageHitratePhysical() is not None:
            self.damageHitratePhysical = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.DamageHitratePhysical())
        if clzTorappuEnemyDatabaseAttributesData.DamageHitrateMagical() is not None:
            self.damageHitrateMagical = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.DamageHitrateMagical())
        if clzTorappuEnemyDatabaseAttributesData.EpBreakRecoverSpeed() is not None:
            self.epBreakRecoverSpeed = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.EpBreakRecoverSpeed())
        if clzTorappuEnemyDatabaseAttributesData.StunImmune() is not None:
            self.stunImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.StunImmune())
        if clzTorappuEnemyDatabaseAttributesData.SilenceImmune() is not None:
            self.silenceImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.SilenceImmune())
        if clzTorappuEnemyDatabaseAttributesData.SleepImmune() is not None:
            self.sleepImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.SleepImmune())
        if clzTorappuEnemyDatabaseAttributesData.FrozenImmune() is not None:
            self.frozenImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.FrozenImmune())
        if clzTorappuEnemyDatabaseAttributesData.LevitateImmune() is not None:
            self.levitateImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.LevitateImmune())
        if clzTorappuEnemyDatabaseAttributesData.DisarmedCombatImmune() is not None:
            self.disarmedCombatImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.DisarmedCombatImmune())
        if clzTorappuEnemyDatabaseAttributesData.FearedImmune() is not None:
            self.fearedImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.FearedImmune())
        if clzTorappuEnemyDatabaseAttributesData.PalsyImmune() is not None:
            self.palsyImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.PalsyImmune())
        if clzTorappuEnemyDatabaseAttributesData.AttractImmune() is not None:
            self.attractImmune = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseAttributesData.AttractImmune())

    # clz_Torappu_EnemyDatabase_AttributesDataT
    def Pack(self, builder):
        if self.maxHp is not None:
            maxHp = self.maxHp.Pack(builder)
        if self.atk is not None:
            atk = self.atk.Pack(builder)
        if self.def_ is not None:
            def_ = self.def_.Pack(builder)
        if self.magicResistance is not None:
            magicResistance = self.magicResistance.Pack(builder)
        if self.cost is not None:
            cost = self.cost.Pack(builder)
        if self.blockCnt is not None:
            blockCnt = self.blockCnt.Pack(builder)
        if self.moveSpeed is not None:
            moveSpeed = self.moveSpeed.Pack(builder)
        if self.attackSpeed is not None:
            attackSpeed = self.attackSpeed.Pack(builder)
        if self.baseAttackTime is not None:
            baseAttackTime = self.baseAttackTime.Pack(builder)
        if self.respawnTime is not None:
            respawnTime = self.respawnTime.Pack(builder)
        if self.hpRecoveryPerSec is not None:
            hpRecoveryPerSec = self.hpRecoveryPerSec.Pack(builder)
        if self.spRecoveryPerSec is not None:
            spRecoveryPerSec = self.spRecoveryPerSec.Pack(builder)
        if self.maxDeployCount is not None:
            maxDeployCount = self.maxDeployCount.Pack(builder)
        if self.massLevel is not None:
            massLevel = self.massLevel.Pack(builder)
        if self.baseForceLevel is not None:
            baseForceLevel = self.baseForceLevel.Pack(builder)
        if self.tauntLevel is not None:
            tauntLevel = self.tauntLevel.Pack(builder)
        if self.epDamageResistance is not None:
            epDamageResistance = self.epDamageResistance.Pack(builder)
        if self.epResistance is not None:
            epResistance = self.epResistance.Pack(builder)
        if self.damageHitratePhysical is not None:
            damageHitratePhysical = self.damageHitratePhysical.Pack(builder)
        if self.damageHitrateMagical is not None:
            damageHitrateMagical = self.damageHitrateMagical.Pack(builder)
        if self.epBreakRecoverSpeed is not None:
            epBreakRecoverSpeed = self.epBreakRecoverSpeed.Pack(builder)
        if self.stunImmune is not None:
            stunImmune = self.stunImmune.Pack(builder)
        if self.silenceImmune is not None:
            silenceImmune = self.silenceImmune.Pack(builder)
        if self.sleepImmune is not None:
            sleepImmune = self.sleepImmune.Pack(builder)
        if self.frozenImmune is not None:
            frozenImmune = self.frozenImmune.Pack(builder)
        if self.levitateImmune is not None:
            levitateImmune = self.levitateImmune.Pack(builder)
        if self.disarmedCombatImmune is not None:
            disarmedCombatImmune = self.disarmedCombatImmune.Pack(builder)
        if self.fearedImmune is not None:
            fearedImmune = self.fearedImmune.Pack(builder)
        if self.palsyImmune is not None:
            palsyImmune = self.palsyImmune.Pack(builder)
        if self.attractImmune is not None:
            attractImmune = self.attractImmune.Pack(builder)
        clz_Torappu_EnemyDatabase_AttributesDataStart(builder)
        if self.maxHp is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddMaxHp(builder, maxHp)
        if self.atk is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddAtk(builder, atk)
        if self.def_ is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddDef(builder, def_)
        if self.magicResistance is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddMagicResistance(builder, magicResistance)
        if self.cost is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddCost(builder, cost)
        if self.blockCnt is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddBlockCnt(builder, blockCnt)
        if self.moveSpeed is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddMoveSpeed(builder, moveSpeed)
        if self.attackSpeed is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddAttackSpeed(builder, attackSpeed)
        if self.baseAttackTime is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddBaseAttackTime(builder, baseAttackTime)
        if self.respawnTime is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddRespawnTime(builder, respawnTime)
        if self.hpRecoveryPerSec is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddHpRecoveryPerSec(builder, hpRecoveryPerSec)
        if self.spRecoveryPerSec is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddSpRecoveryPerSec(builder, spRecoveryPerSec)
        if self.maxDeployCount is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddMaxDeployCount(builder, maxDeployCount)
        if self.massLevel is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddMassLevel(builder, massLevel)
        if self.baseForceLevel is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddBaseForceLevel(builder, baseForceLevel)
        if self.tauntLevel is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddTauntLevel(builder, tauntLevel)
        if self.epDamageResistance is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddEpDamageResistance(builder, epDamageResistance)
        if self.epResistance is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddEpResistance(builder, epResistance)
        if self.damageHitratePhysical is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitratePhysical(builder, damageHitratePhysical)
        if self.damageHitrateMagical is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddDamageHitrateMagical(builder, damageHitrateMagical)
        if self.epBreakRecoverSpeed is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddEpBreakRecoverSpeed(builder, epBreakRecoverSpeed)
        if self.stunImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddStunImmune(builder, stunImmune)
        if self.silenceImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddSilenceImmune(builder, silenceImmune)
        if self.sleepImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddSleepImmune(builder, sleepImmune)
        if self.frozenImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddFrozenImmune(builder, frozenImmune)
        if self.levitateImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddLevitateImmune(builder, levitateImmune)
        if self.disarmedCombatImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddDisarmedCombatImmune(builder, disarmedCombatImmune)
        if self.fearedImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddFearedImmune(builder, fearedImmune)
        if self.palsyImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddPalsyImmune(builder, palsyImmune)
        if self.attractImmune is not None:
            clz_Torappu_EnemyDatabase_AttributesDataAddAttractImmune(builder, attractImmune)
        clzTorappuEnemyDatabaseAttributesData = clz_Torappu_EnemyDatabase_AttributesDataEnd(builder)
        return clzTorappuEnemyDatabaseAttributesData


class clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_SourceApplyWay_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T(object):

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1TorappuSourceApplyWay_ = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_()
        clzTorappuUndefinable1TorappuSourceApplyWay_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1TorappuSourceApplyWay_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1TorappuSourceApplyWay_):
        x = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T()
        x._UnPack(clzTorappuUndefinable1TorappuSourceApplyWay_)
        return x

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T
    def _UnPack(self, clzTorappuUndefinable1TorappuSourceApplyWay_):
        if clzTorappuUndefinable1TorappuSourceApplyWay_ is None:
            return
        self.mDefined = clzTorappuUndefinable1TorappuSourceApplyWay_.MDefined()
        self.mValue = clzTorappuUndefinable1TorappuSourceApplyWay_.MValue()

    # clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_Start(builder)
        clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1TorappuSourceApplyWay_ = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_End(builder)
        return clzTorappuUndefinable1TorappuSourceApplyWay_


class clz_Torappu_Undefinable_1_Torappu_MotionMode_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_MotionMode_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_MotionMode_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_MotionMode_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_MotionMode_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_MotionMode_T(object):

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1TorappuMotionMode_ = clz_Torappu_Undefinable_1_Torappu_MotionMode_()
        clzTorappuUndefinable1TorappuMotionMode_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1TorappuMotionMode_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1TorappuMotionMode_):
        x = clz_Torappu_Undefinable_1_Torappu_MotionMode_T()
        x._UnPack(clzTorappuUndefinable1TorappuMotionMode_)
        return x

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_T
    def _UnPack(self, clzTorappuUndefinable1TorappuMotionMode_):
        if clzTorappuUndefinable1TorappuMotionMode_ is None:
            return
        self.mDefined = clzTorappuUndefinable1TorappuMotionMode_.MDefined()
        self.mValue = clzTorappuUndefinable1TorappuMotionMode_.MValue()

    # clz_Torappu_Undefinable_1_Torappu_MotionMode_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_Torappu_MotionMode_Start(builder)
        clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_Torappu_MotionMode_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1TorappuMotionMode_ = clz_Torappu_Undefinable_1_Torappu_MotionMode_End(builder)
        return clzTorappuUndefinable1TorappuMotionMode_


class clz_Torappu_Undefinable_1_System_String___(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_System_String___()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_System_String___(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_System_String___
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_System_String___
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_System_String___
    def MValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_Undefinable_1_System_String___
    def MValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_Undefinable_1_System_String___
    def MValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_Undefinable_1_System_String___Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mValue), 0)

def clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_Undefinable_1_System_String___End(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_Undefinable_1_System_String___T(object):

    # clz_Torappu_Undefinable_1_System_String___T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1SystemString__ = clz_Torappu_Undefinable_1_System_String___()
        clzTorappuUndefinable1SystemString__.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1SystemString__)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1SystemString__):
        x = clz_Torappu_Undefinable_1_System_String___T()
        x._UnPack(clzTorappuUndefinable1SystemString__)
        return x

    # clz_Torappu_Undefinable_1_System_String___T
    def _UnPack(self, clzTorappuUndefinable1SystemString__):
        if clzTorappuUndefinable1SystemString__ is None:
            return
        self.mDefined = clzTorappuUndefinable1SystemString__.MDefined()
        if not clzTorappuUndefinable1SystemString__.MValueIsNone():
            self.mValue = []
            for i in range(clzTorappuUndefinable1SystemString__.MValueLength()):
                self.mValue.append(clzTorappuUndefinable1SystemString__.MValue(i))

    # clz_Torappu_Undefinable_1_System_String___T
    def Pack(self, builder):
        if self.mValue is not None:
            mValuelist = []
            for i in range(len(self.mValue)):
                mValuelist.append(builder.CreateString(self.mValue[i]))
            clz_Torappu_Undefinable_1_System_String___StartMValueVector(builder, len(self.mValue))
            for i in reversed(range(len(self.mValue))):
                builder.PrependUOffsetTRelative(mValuelist[i])
            mValue = builder.EndVector()
        clz_Torappu_Undefinable_1_System_String___Start(builder)
        clz_Torappu_Undefinable_1_System_String___AddMDefined(builder, self.mDefined)
        if self.mValue is not None:
            clz_Torappu_Undefinable_1_System_String___AddMValue(builder, mValue)
        clzTorappuUndefinable1SystemString__ = clz_Torappu_Undefinable_1_System_String___End(builder)
        return clzTorappuUndefinable1SystemString__


class clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_Undefinable_1_Torappu_EnemyLevelType_(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def MDefined(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_
    def MValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_Start(builder):
    builder.StartObject(2)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMDefined(builder, mDefined):
    builder.PrependBoolSlot(0, mDefined, 0)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMValue(builder, mValue):
    builder.PrependInt32Slot(1, mValue, 0)

def clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_End(builder):
    return builder.EndObject()



class clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T(object):

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T
    def __init__(self):
        self.mDefined = False  # type: bool
        self.mValue = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuUndefinable1TorappuEnemyLevelType_ = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_()
        clzTorappuUndefinable1TorappuEnemyLevelType_.Init(buf, pos)
        return cls.InitFromObj(clzTorappuUndefinable1TorappuEnemyLevelType_)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuUndefinable1TorappuEnemyLevelType_):
        x = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T()
        x._UnPack(clzTorappuUndefinable1TorappuEnemyLevelType_)
        return x

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T
    def _UnPack(self, clzTorappuUndefinable1TorappuEnemyLevelType_):
        if clzTorappuUndefinable1TorappuEnemyLevelType_ is None:
            return
        self.mDefined = clzTorappuUndefinable1TorappuEnemyLevelType_.MDefined()
        self.mValue = clzTorappuUndefinable1TorappuEnemyLevelType_.MValue()

    # clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T
    def Pack(self, builder):
        clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_Start(builder)
        clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMDefined(builder, self.mDefined)
        clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_AddMValue(builder, self.mValue)
        clzTorappuUndefinable1TorappuEnemyLevelType_ = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_End(builder)
        return clzTorappuUndefinable1TorappuEnemyLevelType_


class clz_Torappu_EnemyDatabase_EnemyData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_EnemyDatabase_EnemyData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_EnemyDatabase_EnemyData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_EnemyDatabase_EnemyData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_EnemyDatabase_EnemyData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def PrefabKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Attributes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EnemyDatabase_AttributesData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def ApplyWay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def Motion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_MotionMode_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def EnemyTags(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_String___()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def LifePointReduce(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def LevelType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def RangeRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def NumOfExtraDrops(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Int32_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def ViewRadius(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Single_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def NotCountInTotal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_Undefinable_1_System_Boolean_()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def TalentBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def Skills(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData_ESkillData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_EnemyDatabase_EnemyData
    def SkillsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def SkillsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_EnemyDatabase_EnemyData
    def SpData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_EnemyData_ESpData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_EnemyDatabase_EnemyDataStart(builder):
    builder.StartObject(16)

def clz_Torappu_EnemyDatabase_EnemyDataAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddDescription(builder, description):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddPrefabKey(builder, prefabKey):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(prefabKey), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddAttributes(builder, attributes):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(attributes), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddApplyWay(builder, applyWay):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(applyWay), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddMotion(builder, motion):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(motion), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddEnemyTags(builder, enemyTags):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(enemyTags), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddLifePointReduce(builder, lifePointReduce):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(lifePointReduce), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddLevelType(builder, levelType):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(levelType), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddRangeRadius(builder, rangeRadius):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(rangeRadius), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(numOfExtraDrops), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddViewRadius(builder, viewRadius):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(viewRadius), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddNotCountInTotal(builder, notCountInTotal):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(notCountInTotal), 0)

def clz_Torappu_EnemyDatabase_EnemyDataAddTalentBlackboard(builder, talentBlackboard):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(talentBlackboard), 0)

def clz_Torappu_EnemyDatabase_EnemyDataStartTalentBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EnemyDatabase_EnemyDataAddSkills(builder, skills):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(skills), 0)

def clz_Torappu_EnemyDatabase_EnemyDataStartSkillsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_EnemyDatabase_EnemyDataAddSpData(builder, spData):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(spData), 0)

def clz_Torappu_EnemyDatabase_EnemyDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_EnemyDatabase_EnemyDataT(object):

    # clz_Torappu_EnemyDatabase_EnemyDataT
    def __init__(self):
        self.name = None  # type: Optional[clz_Torappu_Undefinable_1_System_String_T]
        self.description = None  # type: Optional[clz_Torappu_Undefinable_1_System_String_T]
        self.prefabKey = None  # type: Optional[clz_Torappu_Undefinable_1_System_String_T]
        self.attributes = None  # type: Optional[clz_Torappu_EnemyDatabase_AttributesDataT]
        self.applyWay = None  # type: Optional[clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T]
        self.motion = None  # type: Optional[clz_Torappu_Undefinable_1_Torappu_MotionMode_T]
        self.enemyTags = None  # type: Optional[clz_Torappu_Undefinable_1_System_String___T]
        self.lifePointReduce = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.levelType = None  # type: Optional[clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T]
        self.rangeRadius = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.numOfExtraDrops = None  # type: Optional[clz_Torappu_Undefinable_1_System_Int32_T]
        self.viewRadius = None  # type: Optional[clz_Torappu_Undefinable_1_System_Single_T]
        self.notCountInTotal = None  # type: Optional[clz_Torappu_Undefinable_1_System_Boolean_T]
        self.talentBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]
        self.skills = None  # type: List[clz_Torappu_LevelData_EnemyData_ESkillDataT]
        self.spData = None  # type: Optional[clz_Torappu_LevelData_EnemyData_ESpDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuEnemyDatabaseEnemyData = clz_Torappu_EnemyDatabase_EnemyData()
        clzTorappuEnemyDatabaseEnemyData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuEnemyDatabaseEnemyData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuEnemyDatabaseEnemyData):
        x = clz_Torappu_EnemyDatabase_EnemyDataT()
        x._UnPack(clzTorappuEnemyDatabaseEnemyData)
        return x

    # clz_Torappu_EnemyDatabase_EnemyDataT
    def _UnPack(self, clzTorappuEnemyDatabaseEnemyData):
        if clzTorappuEnemyDatabaseEnemyData is None:
            return
        if clzTorappuEnemyDatabaseEnemyData.Name() is not None:
            self.name = clz_Torappu_Undefinable_1_System_String_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.Name())
        if clzTorappuEnemyDatabaseEnemyData.Description() is not None:
            self.description = clz_Torappu_Undefinable_1_System_String_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.Description())
        if clzTorappuEnemyDatabaseEnemyData.PrefabKey() is not None:
            self.prefabKey = clz_Torappu_Undefinable_1_System_String_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.PrefabKey())
        if clzTorappuEnemyDatabaseEnemyData.Attributes() is not None:
            self.attributes = clz_Torappu_EnemyDatabase_AttributesDataT.InitFromObj(clzTorappuEnemyDatabaseEnemyData.Attributes())
        if clzTorappuEnemyDatabaseEnemyData.ApplyWay() is not None:
            self.applyWay = clz_Torappu_Undefinable_1_Torappu_SourceApplyWay_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.ApplyWay())
        if clzTorappuEnemyDatabaseEnemyData.Motion() is not None:
            self.motion = clz_Torappu_Undefinable_1_Torappu_MotionMode_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.Motion())
        if clzTorappuEnemyDatabaseEnemyData.EnemyTags() is not None:
            self.enemyTags = clz_Torappu_Undefinable_1_System_String___T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.EnemyTags())
        if clzTorappuEnemyDatabaseEnemyData.LifePointReduce() is not None:
            self.lifePointReduce = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.LifePointReduce())
        if clzTorappuEnemyDatabaseEnemyData.LevelType() is not None:
            self.levelType = clz_Torappu_Undefinable_1_Torappu_EnemyLevelType_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.LevelType())
        if clzTorappuEnemyDatabaseEnemyData.RangeRadius() is not None:
            self.rangeRadius = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.RangeRadius())
        if clzTorappuEnemyDatabaseEnemyData.NumOfExtraDrops() is not None:
            self.numOfExtraDrops = clz_Torappu_Undefinable_1_System_Int32_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.NumOfExtraDrops())
        if clzTorappuEnemyDatabaseEnemyData.ViewRadius() is not None:
            self.viewRadius = clz_Torappu_Undefinable_1_System_Single_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.ViewRadius())
        if clzTorappuEnemyDatabaseEnemyData.NotCountInTotal() is not None:
            self.notCountInTotal = clz_Torappu_Undefinable_1_System_Boolean_T.InitFromObj(clzTorappuEnemyDatabaseEnemyData.NotCountInTotal())
        if not clzTorappuEnemyDatabaseEnemyData.TalentBlackboardIsNone():
            self.talentBlackboard = []
            for i in range(clzTorappuEnemyDatabaseEnemyData.TalentBlackboardLength()):
                if clzTorappuEnemyDatabaseEnemyData.TalentBlackboard(i) is None:
                    self.talentBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuEnemyDatabaseEnemyData.TalentBlackboard(i))
                    self.talentBlackboard.append(clz_Torappu_Blackboard_DataPair_)
        if not clzTorappuEnemyDatabaseEnemyData.SkillsIsNone():
            self.skills = []
            for i in range(clzTorappuEnemyDatabaseEnemyData.SkillsLength()):
                if clzTorappuEnemyDatabaseEnemyData.Skills(i) is None:
                    self.skills.append(None)
                else:
                    clz_Torappu_LevelData_EnemyData_ESkillData_ = clz_Torappu_LevelData_EnemyData_ESkillDataT.InitFromObj(clzTorappuEnemyDatabaseEnemyData.Skills(i))
                    self.skills.append(clz_Torappu_LevelData_EnemyData_ESkillData_)
        if clzTorappuEnemyDatabaseEnemyData.SpData() is not None:
            self.spData = clz_Torappu_LevelData_EnemyData_ESpDataT.InitFromObj(clzTorappuEnemyDatabaseEnemyData.SpData())

    # clz_Torappu_EnemyDatabase_EnemyDataT
    def Pack(self, builder):
        if self.name is not None:
            name = self.name.Pack(builder)
        if self.description is not None:
            description = self.description.Pack(builder)
        if self.prefabKey is not None:
            prefabKey = self.prefabKey.Pack(builder)
        if self.attributes is not None:
            attributes = self.attributes.Pack(builder)
        if self.applyWay is not None:
            applyWay = self.applyWay.Pack(builder)
        if self.motion is not None:
            motion = self.motion.Pack(builder)
        if self.enemyTags is not None:
            enemyTags = self.enemyTags.Pack(builder)
        if self.lifePointReduce is not None:
            lifePointReduce = self.lifePointReduce.Pack(builder)
        if self.levelType is not None:
            levelType = self.levelType.Pack(builder)
        if self.rangeRadius is not None:
            rangeRadius = self.rangeRadius.Pack(builder)
        if self.numOfExtraDrops is not None:
            numOfExtraDrops = self.numOfExtraDrops.Pack(builder)
        if self.viewRadius is not None:
            viewRadius = self.viewRadius.Pack(builder)
        if self.notCountInTotal is not None:
            notCountInTotal = self.notCountInTotal.Pack(builder)
        if self.talentBlackboard is not None:
            talentBlackboardlist = []
            for i in range(len(self.talentBlackboard)):
                talentBlackboardlist.append(self.talentBlackboard[i].Pack(builder))
            clz_Torappu_EnemyDatabase_EnemyDataStartTalentBlackboardVector(builder, len(self.talentBlackboard))
            for i in reversed(range(len(self.talentBlackboard))):
                builder.PrependUOffsetTRelative(talentBlackboardlist[i])
            talentBlackboard = builder.EndVector()
        if self.skills is not None:
            skillslist = []
            for i in range(len(self.skills)):
                skillslist.append(self.skills[i].Pack(builder))
            clz_Torappu_EnemyDatabase_EnemyDataStartSkillsVector(builder, len(self.skills))
            for i in reversed(range(len(self.skills))):
                builder.PrependUOffsetTRelative(skillslist[i])
            skills = builder.EndVector()
        if self.spData is not None:
            spData = self.spData.Pack(builder)
        clz_Torappu_EnemyDatabase_EnemyDataStart(builder)
        if self.name is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddName(builder, name)
        if self.description is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddDescription(builder, description)
        if self.prefabKey is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddPrefabKey(builder, prefabKey)
        if self.attributes is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddAttributes(builder, attributes)
        if self.applyWay is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddApplyWay(builder, applyWay)
        if self.motion is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddMotion(builder, motion)
        if self.enemyTags is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddEnemyTags(builder, enemyTags)
        if self.lifePointReduce is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddLifePointReduce(builder, lifePointReduce)
        if self.levelType is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddLevelType(builder, levelType)
        if self.rangeRadius is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddRangeRadius(builder, rangeRadius)
        if self.numOfExtraDrops is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddNumOfExtraDrops(builder, numOfExtraDrops)
        if self.viewRadius is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddViewRadius(builder, viewRadius)
        if self.notCountInTotal is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddNotCountInTotal(builder, notCountInTotal)
        if self.talentBlackboard is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddTalentBlackboard(builder, talentBlackboard)
        if self.skills is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddSkills(builder, skills)
        if self.spData is not None:
            clz_Torappu_EnemyDatabase_EnemyDataAddSpData(builder, spData)
        clzTorappuEnemyDatabaseEnemyData = clz_Torappu_EnemyDatabase_EnemyDataEnd(builder)
        return clzTorappuEnemyDatabaseEnemyData


class clz_Torappu_LevelData_EnemyDataDbReference(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_EnemyDataDbReference()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_EnemyDataDbReference(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_EnemyDataDbReference
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_EnemyDataDbReference
    def UseDb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_EnemyDataDbReference
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_EnemyDataDbReference
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_EnemyDataDbReference
    def OverwrittenData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_EnemyDatabase_EnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def clz_Torappu_LevelData_EnemyDataDbReferenceStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddUseDb(builder, useDb):
    builder.PrependBoolSlot(0, useDb, 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddLevel(builder, level):
    builder.PrependInt32Slot(2, level, 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceAddOverwrittenData(builder, overwrittenData):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(overwrittenData), 0)

def clz_Torappu_LevelData_EnemyDataDbReferenceEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class clz_Torappu_LevelData_EnemyDataDbReferenceT(object):

    # clz_Torappu_LevelData_EnemyDataDbReferenceT
    def __init__(self):
        self.useDb = False  # type: bool
        self.id = None  # type: str
        self.level = 0  # type: int
        self.overwrittenData = None  # type: Optional[clz_Torappu_EnemyDatabase_EnemyDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataEnemyDataDbReference = clz_Torappu_LevelData_EnemyDataDbReference()
        clzTorappuLevelDataEnemyDataDbReference.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataEnemyDataDbReference)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataEnemyDataDbReference):
        x = clz_Torappu_LevelData_EnemyDataDbReferenceT()
        x._UnPack(clzTorappuLevelDataEnemyDataDbReference)
        return x

    # clz_Torappu_LevelData_EnemyDataDbReferenceT
    def _UnPack(self, clzTorappuLevelDataEnemyDataDbReference):
        if clzTorappuLevelDataEnemyDataDbReference is None:
            return
        self.useDb = clzTorappuLevelDataEnemyDataDbReference.UseDb()
        self.id = clzTorappuLevelDataEnemyDataDbReference.Id()
        self.level = clzTorappuLevelDataEnemyDataDbReference.Level()
        if clzTorappuLevelDataEnemyDataDbReference.OverwrittenData() is not None:
            self.overwrittenData = clz_Torappu_EnemyDatabase_EnemyDataT.InitFromObj(clzTorappuLevelDataEnemyDataDbReference.OverwrittenData())

    # clz_Torappu_LevelData_EnemyDataDbReferenceT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.overwrittenData is not None:
            overwrittenData = self.overwrittenData.Pack(builder)
        clz_Torappu_LevelData_EnemyDataDbReferenceStart(builder)
        clz_Torappu_LevelData_EnemyDataDbReferenceAddUseDb(builder, self.useDb)
        if self.id is not None:
            clz_Torappu_LevelData_EnemyDataDbReferenceAddId(builder, id)
        clz_Torappu_LevelData_EnemyDataDbReferenceAddLevel(builder, self.level)
        if self.overwrittenData is not None:
            clz_Torappu_LevelData_EnemyDataDbReferenceAddOverwrittenData(builder, overwrittenData)
        clzTorappuLevelDataEnemyDataDbReference = clz_Torappu_LevelData_EnemyDataDbReferenceEnd(builder)
        return clzTorappuLevelDataEnemyDataDbReference


class clz_Torappu_LevelData_WaveData_FragmentData_ActionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData_ActionData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ActionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ManagedByScheduler(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RouteIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def BlockFragment(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoPreviewRoute(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def AutoDisplayEnemyInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def IsUnharmfulAndAlwaysCountAsKilled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def HiddenGroup(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomSpawnGroupPackKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RandomType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def RefreshType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def DontBlockWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionData
    def ForceBlockWaveInBranch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder):
    builder.StartObject(19)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, actionType):
    builder.PrependInt32Slot(0, actionType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, managedByScheduler):
    builder.PrependBoolSlot(1, managedByScheduler, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, count):
    builder.PrependInt32Slot(3, count, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(4, preDelay, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, interval):
    builder.PrependFloat32Slot(5, interval, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, routeIndex):
    builder.PrependInt32Slot(6, routeIndex, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, blockFragment):
    builder.PrependBoolSlot(7, blockFragment, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, autoPreviewRoute):
    builder.PrependBoolSlot(8, autoPreviewRoute, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, autoDisplayEnemyInfo):
    builder.PrependBoolSlot(9, autoDisplayEnemyInfo, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, isUnharmfulAndAlwaysCountAsKilled):
    builder.PrependBoolSlot(10, isUnharmfulAndAlwaysCountAsKilled, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hiddenGroup), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupKey), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(randomSpawnGroupPackKey), 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, randomType):
    builder.PrependInt32Slot(14, randomType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, refreshType):
    builder.PrependInt32Slot(15, refreshType, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, weight):
    builder.PrependInt32Slot(16, weight, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, dontBlockWave):
    builder.PrependBoolSlot(17, dontBlockWave, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddForceBlockWaveInBranch(builder, forceBlockWaveInBranch):
    builder.PrependBoolSlot(18, forceBlockWaveInBranch, 0)

def clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder):
    return builder.EndObject()



class clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT(object):

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def __init__(self):
        self.actionType = 0  # type: int
        self.managedByScheduler = False  # type: bool
        self.key = None  # type: str
        self.count = 0  # type: int
        self.preDelay = 0.0  # type: float
        self.interval = 0.0  # type: float
        self.routeIndex = 0  # type: int
        self.blockFragment = False  # type: bool
        self.autoPreviewRoute = False  # type: bool
        self.autoDisplayEnemyInfo = False  # type: bool
        self.isUnharmfulAndAlwaysCountAsKilled = False  # type: bool
        self.hiddenGroup = None  # type: str
        self.randomSpawnGroupKey = None  # type: str
        self.randomSpawnGroupPackKey = None  # type: str
        self.randomType = 0  # type: int
        self.refreshType = 0  # type: int
        self.weight = 0  # type: int
        self.dontBlockWave = False  # type: bool
        self.forceBlockWaveInBranch = False  # type: bool

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveDataFragmentDataActionData = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
        clzTorappuLevelDataWaveDataFragmentDataActionData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveDataFragmentDataActionData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveDataFragmentDataActionData):
        x = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT()
        x._UnPack(clzTorappuLevelDataWaveDataFragmentDataActionData)
        return x

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def _UnPack(self, clzTorappuLevelDataWaveDataFragmentDataActionData):
        if clzTorappuLevelDataWaveDataFragmentDataActionData is None:
            return
        self.actionType = clzTorappuLevelDataWaveDataFragmentDataActionData.ActionType()
        self.managedByScheduler = clzTorappuLevelDataWaveDataFragmentDataActionData.ManagedByScheduler()
        self.key = clzTorappuLevelDataWaveDataFragmentDataActionData.Key()
        self.count = clzTorappuLevelDataWaveDataFragmentDataActionData.Count()
        self.preDelay = clzTorappuLevelDataWaveDataFragmentDataActionData.PreDelay()
        self.interval = clzTorappuLevelDataWaveDataFragmentDataActionData.Interval()
        self.routeIndex = clzTorappuLevelDataWaveDataFragmentDataActionData.RouteIndex()
        self.blockFragment = clzTorappuLevelDataWaveDataFragmentDataActionData.BlockFragment()
        self.autoPreviewRoute = clzTorappuLevelDataWaveDataFragmentDataActionData.AutoPreviewRoute()
        self.autoDisplayEnemyInfo = clzTorappuLevelDataWaveDataFragmentDataActionData.AutoDisplayEnemyInfo()
        self.isUnharmfulAndAlwaysCountAsKilled = clzTorappuLevelDataWaveDataFragmentDataActionData.IsUnharmfulAndAlwaysCountAsKilled()
        self.hiddenGroup = clzTorappuLevelDataWaveDataFragmentDataActionData.HiddenGroup()
        self.randomSpawnGroupKey = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomSpawnGroupKey()
        self.randomSpawnGroupPackKey = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomSpawnGroupPackKey()
        self.randomType = clzTorappuLevelDataWaveDataFragmentDataActionData.RandomType()
        self.refreshType = clzTorappuLevelDataWaveDataFragmentDataActionData.RefreshType()
        self.weight = clzTorappuLevelDataWaveDataFragmentDataActionData.Weight()
        self.dontBlockWave = clzTorappuLevelDataWaveDataFragmentDataActionData.DontBlockWave()
        self.forceBlockWaveInBranch = clzTorappuLevelDataWaveDataFragmentDataActionData.ForceBlockWaveInBranch()

    # clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.hiddenGroup is not None:
            hiddenGroup = builder.CreateString(self.hiddenGroup)
        if self.randomSpawnGroupKey is not None:
            randomSpawnGroupKey = builder.CreateString(self.randomSpawnGroupKey)
        if self.randomSpawnGroupPackKey is not None:
            randomSpawnGroupPackKey = builder.CreateString(self.randomSpawnGroupPackKey)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataStart(builder)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddActionType(builder, self.actionType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddManagedByScheduler(builder, self.managedByScheduler)
        if self.key is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddKey(builder, key)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddCount(builder, self.count)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddPreDelay(builder, self.preDelay)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddInterval(builder, self.interval)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRouteIndex(builder, self.routeIndex)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddBlockFragment(builder, self.blockFragment)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoPreviewRoute(builder, self.autoPreviewRoute)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddAutoDisplayEnemyInfo(builder, self.autoDisplayEnemyInfo)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddIsUnharmfulAndAlwaysCountAsKilled(builder, self.isUnharmfulAndAlwaysCountAsKilled)
        if self.hiddenGroup is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddHiddenGroup(builder, hiddenGroup)
        if self.randomSpawnGroupKey is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupKey(builder, randomSpawnGroupKey)
        if self.randomSpawnGroupPackKey is not None:
            clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomSpawnGroupPackKey(builder, randomSpawnGroupPackKey)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRandomType(builder, self.randomType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddRefreshType(builder, self.refreshType)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddWeight(builder, self.weight)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddDontBlockWave(builder, self.dontBlockWave)
        clz_Torappu_LevelData_WaveData_FragmentData_ActionDataAddForceBlockWaveInBranch(builder, self.forceBlockWaveInBranch)
        clzTorappuLevelDataWaveDataFragmentDataActionData = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataEnd(builder)
        return clzTorappuLevelDataWaveDataFragmentDataActionData


class clz_Torappu_LevelData_WaveData_FragmentData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData_FragmentData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData_FragmentData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData_FragmentData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData_FragmentData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData_FragmentData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_LevelData_WaveData_FragmentDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_WaveData_FragmentDataT(object):

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def __init__(self):
        self.preDelay = 0.0  # type: float
        self.actions = None  # type: List[clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveDataFragmentData = clz_Torappu_LevelData_WaveData_FragmentData()
        clzTorappuLevelDataWaveDataFragmentData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveDataFragmentData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveDataFragmentData):
        x = clz_Torappu_LevelData_WaveData_FragmentDataT()
        x._UnPack(clzTorappuLevelDataWaveDataFragmentData)
        return x

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def _UnPack(self, clzTorappuLevelDataWaveDataFragmentData):
        if clzTorappuLevelDataWaveDataFragmentData is None:
            return
        self.preDelay = clzTorappuLevelDataWaveDataFragmentData.PreDelay()
        if not clzTorappuLevelDataWaveDataFragmentData.ActionsIsNone():
            self.actions = []
            for i in range(clzTorappuLevelDataWaveDataFragmentData.ActionsLength()):
                if clzTorappuLevelDataWaveDataFragmentData.Actions(i) is None:
                    self.actions.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_FragmentData_ActionData_ = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT.InitFromObj(clzTorappuLevelDataWaveDataFragmentData.Actions(i))
                    self.actions.append(clz_Torappu_LevelData_WaveData_FragmentData_ActionData_)

    # clz_Torappu_LevelData_WaveData_FragmentDataT
    def Pack(self, builder):
        if self.actions is not None:
            actionslist = []
            for i in range(len(self.actions)):
                actionslist.append(self.actions[i].Pack(builder))
            clz_Torappu_LevelData_WaveData_FragmentDataStartActionsVector(builder, len(self.actions))
            for i in reversed(range(len(self.actions))):
                builder.PrependUOffsetTRelative(actionslist[i])
            actions = builder.EndVector()
        clz_Torappu_LevelData_WaveData_FragmentDataStart(builder)
        clz_Torappu_LevelData_WaveData_FragmentDataAddPreDelay(builder, self.preDelay)
        if self.actions is not None:
            clz_Torappu_LevelData_WaveData_FragmentDataAddActions(builder, actions)
        clzTorappuLevelDataWaveDataFragmentData = clz_Torappu_LevelData_WaveData_FragmentDataEnd(builder)
        return clzTorappuLevelDataWaveDataFragmentData


class clz_Torappu_LevelData_WaveData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_WaveData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_WaveData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_WaveData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_WaveData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def PostDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def MaxTimeWaitingForNextWave(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_WaveData
    def Fragments(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_WaveData
    def FragmentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_WaveData
    def FragmentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_WaveData
    def AdvancedWaveTag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_LevelData_WaveDataStart(builder):
    builder.StartObject(5)

def clz_Torappu_LevelData_WaveDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_WaveDataAddPostDelay(builder, postDelay):
    builder.PrependFloat32Slot(1, postDelay, 0.0)

def clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, maxTimeWaitingForNextWave):
    builder.PrependFloat32Slot(2, maxTimeWaitingForNextWave, 0.0)

def clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fragments), 0)

def clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(advancedWaveTag), 0)

def clz_Torappu_LevelData_WaveDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_WaveDataT(object):

    # clz_Torappu_LevelData_WaveDataT
    def __init__(self):
        self.preDelay = 0.0  # type: float
        self.postDelay = 0.0  # type: float
        self.maxTimeWaitingForNextWave = 0.0  # type: float
        self.fragments = None  # type: List[clz_Torappu_LevelData_WaveData_FragmentDataT]
        self.advancedWaveTag = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataWaveData = clz_Torappu_LevelData_WaveData()
        clzTorappuLevelDataWaveData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataWaveData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataWaveData):
        x = clz_Torappu_LevelData_WaveDataT()
        x._UnPack(clzTorappuLevelDataWaveData)
        return x

    # clz_Torappu_LevelData_WaveDataT
    def _UnPack(self, clzTorappuLevelDataWaveData):
        if clzTorappuLevelDataWaveData is None:
            return
        self.preDelay = clzTorappuLevelDataWaveData.PreDelay()
        self.postDelay = clzTorappuLevelDataWaveData.PostDelay()
        self.maxTimeWaitingForNextWave = clzTorappuLevelDataWaveData.MaxTimeWaitingForNextWave()
        if not clzTorappuLevelDataWaveData.FragmentsIsNone():
            self.fragments = []
            for i in range(clzTorappuLevelDataWaveData.FragmentsLength()):
                if clzTorappuLevelDataWaveData.Fragments(i) is None:
                    self.fragments.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_FragmentData_ = clz_Torappu_LevelData_WaveData_FragmentDataT.InitFromObj(clzTorappuLevelDataWaveData.Fragments(i))
                    self.fragments.append(clz_Torappu_LevelData_WaveData_FragmentData_)
        self.advancedWaveTag = clzTorappuLevelDataWaveData.AdvancedWaveTag()

    # clz_Torappu_LevelData_WaveDataT
    def Pack(self, builder):
        if self.fragments is not None:
            fragmentslist = []
            for i in range(len(self.fragments)):
                fragmentslist.append(self.fragments[i].Pack(builder))
            clz_Torappu_LevelData_WaveDataStartFragmentsVector(builder, len(self.fragments))
            for i in reversed(range(len(self.fragments))):
                builder.PrependUOffsetTRelative(fragmentslist[i])
            fragments = builder.EndVector()
        if self.advancedWaveTag is not None:
            advancedWaveTag = builder.CreateString(self.advancedWaveTag)
        clz_Torappu_LevelData_WaveDataStart(builder)
        clz_Torappu_LevelData_WaveDataAddPreDelay(builder, self.preDelay)
        clz_Torappu_LevelData_WaveDataAddPostDelay(builder, self.postDelay)
        clz_Torappu_LevelData_WaveDataAddMaxTimeWaitingForNextWave(builder, self.maxTimeWaitingForNextWave)
        if self.fragments is not None:
            clz_Torappu_LevelData_WaveDataAddFragments(builder, fragments)
        if self.advancedWaveTag is not None:
            clz_Torappu_LevelData_WaveDataAddAdvancedWaveTag(builder, advancedWaveTag)
        clzTorappuLevelDataWaveData = clz_Torappu_LevelData_WaveDataEnd(builder)
        return clzTorappuLevelDataWaveData


class clz_Torappu_LevelData_BranchData_PhaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_BranchData_PhaseData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_BranchData_PhaseData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_BranchData_PhaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_BranchData_PhaseData
    def PreDelay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData_FragmentData_ActionData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData_PhaseData
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData_PhaseData
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def clz_Torappu_LevelData_BranchData_PhaseDataStart(builder):
    builder.StartObject(2)

def clz_Torappu_LevelData_BranchData_PhaseDataAddPreDelay(builder, preDelay):
    builder.PrependFloat32Slot(0, preDelay, 0.0)

def clz_Torappu_LevelData_BranchData_PhaseDataAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def clz_Torappu_LevelData_BranchData_PhaseDataStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchData_PhaseDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_BranchData_PhaseDataT(object):

    # clz_Torappu_LevelData_BranchData_PhaseDataT
    def __init__(self):
        self.preDelay = 0.0  # type: float
        self.actions = None  # type: List[clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataBranchDataPhaseData = clz_Torappu_LevelData_BranchData_PhaseData()
        clzTorappuLevelDataBranchDataPhaseData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataBranchDataPhaseData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataBranchDataPhaseData):
        x = clz_Torappu_LevelData_BranchData_PhaseDataT()
        x._UnPack(clzTorappuLevelDataBranchDataPhaseData)
        return x

    # clz_Torappu_LevelData_BranchData_PhaseDataT
    def _UnPack(self, clzTorappuLevelDataBranchDataPhaseData):
        if clzTorappuLevelDataBranchDataPhaseData is None:
            return
        self.preDelay = clzTorappuLevelDataBranchDataPhaseData.PreDelay()
        if not clzTorappuLevelDataBranchDataPhaseData.ActionsIsNone():
            self.actions = []
            for i in range(clzTorappuLevelDataBranchDataPhaseData.ActionsLength()):
                if clzTorappuLevelDataBranchDataPhaseData.Actions(i) is None:
                    self.actions.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_FragmentData_ActionData_ = clz_Torappu_LevelData_WaveData_FragmentData_ActionDataT.InitFromObj(clzTorappuLevelDataBranchDataPhaseData.Actions(i))
                    self.actions.append(clz_Torappu_LevelData_WaveData_FragmentData_ActionData_)

    # clz_Torappu_LevelData_BranchData_PhaseDataT
    def Pack(self, builder):
        if self.actions is not None:
            actionslist = []
            for i in range(len(self.actions)):
                actionslist.append(self.actions[i].Pack(builder))
            clz_Torappu_LevelData_BranchData_PhaseDataStartActionsVector(builder, len(self.actions))
            for i in reversed(range(len(self.actions))):
                builder.PrependUOffsetTRelative(actionslist[i])
            actions = builder.EndVector()
        clz_Torappu_LevelData_BranchData_PhaseDataStart(builder)
        clz_Torappu_LevelData_BranchData_PhaseDataAddPreDelay(builder, self.preDelay)
        if self.actions is not None:
            clz_Torappu_LevelData_BranchData_PhaseDataAddActions(builder, actions)
        clzTorappuLevelDataBranchDataPhaseData = clz_Torappu_LevelData_BranchData_PhaseDataEnd(builder)
        return clzTorappuLevelDataBranchDataPhaseData


class clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_BranchData
    def Phases(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_BranchData_PhaseData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_BranchData
    def PhasesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_BranchData
    def PhasesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(1)

def clz_Torappu_LevelData_BranchDataAddPhases(builder, phases):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(phases), 0)

def clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_BranchDataT(object):

    # clz_Torappu_LevelData_BranchDataT
    def __init__(self):
        self.phases = None  # type: List[clz_Torappu_LevelData_BranchData_PhaseDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataBranchData = clz_Torappu_LevelData_BranchData()
        clzTorappuLevelDataBranchData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataBranchData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataBranchData):
        x = clz_Torappu_LevelData_BranchDataT()
        x._UnPack(clzTorappuLevelDataBranchData)
        return x

    # clz_Torappu_LevelData_BranchDataT
    def _UnPack(self, clzTorappuLevelDataBranchData):
        if clzTorappuLevelDataBranchData is None:
            return
        if not clzTorappuLevelDataBranchData.PhasesIsNone():
            self.phases = []
            for i in range(clzTorappuLevelDataBranchData.PhasesLength()):
                if clzTorappuLevelDataBranchData.Phases(i) is None:
                    self.phases.append(None)
                else:
                    clz_Torappu_LevelData_BranchData_PhaseData_ = clz_Torappu_LevelData_BranchData_PhaseDataT.InitFromObj(clzTorappuLevelDataBranchData.Phases(i))
                    self.phases.append(clz_Torappu_LevelData_BranchData_PhaseData_)

    # clz_Torappu_LevelData_BranchDataT
    def Pack(self, builder):
        if self.phases is not None:
            phaseslist = []
            for i in range(len(self.phases)):
                phaseslist.append(self.phases[i].Pack(builder))
            clz_Torappu_LevelData_BranchDataStartPhasesVector(builder, len(self.phases))
            for i in reversed(range(len(self.phases))):
                builder.PrependUOffsetTRelative(phaseslist[i])
            phases = builder.EndVector()
        clz_Torappu_LevelData_BranchDataStart(builder)
        if self.phases is not None:
            clz_Torappu_LevelData_BranchDataAddPhases(builder, phases)
        clzTorappuLevelDataBranchData = clz_Torappu_LevelData_BranchDataEnd(builder)
        return clzTorappuLevelDataBranchData


class dict__string__clz_Torappu_LevelData_BranchData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = dict__string__clz_Torappu_LevelData_BranchData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsdict__string__clz_Torappu_LevelData_BranchData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # dict__string__clz_Torappu_LevelData_BranchData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # dict__string__clz_Torappu_LevelData_BranchData
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # dict__string__clz_Torappu_LevelData_BranchData
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def dict__string__clz_Torappu_LevelData_BranchDataStart(builder):
    builder.StartObject(2)

def dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(value), 0)

def dict__string__clz_Torappu_LevelData_BranchDataEnd(builder):
    return builder.EndObject()


try:
    from typing import Optional
except:
    pass

class dict__string__clz_Torappu_LevelData_BranchDataT(object):

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def __init__(self):
        self.key = None  # type: str
        self.value = None  # type: Optional[clz_Torappu_LevelData_BranchDataT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        dict_string_clzTorappuLevelDataBranchData = dict__string__clz_Torappu_LevelData_BranchData()
        dict_string_clzTorappuLevelDataBranchData.Init(buf, pos)
        return cls.InitFromObj(dict_string_clzTorappuLevelDataBranchData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, dict_string_clzTorappuLevelDataBranchData):
        x = dict__string__clz_Torappu_LevelData_BranchDataT()
        x._UnPack(dict_string_clzTorappuLevelDataBranchData)
        return x

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def _UnPack(self, dict_string_clzTorappuLevelDataBranchData):
        if dict_string_clzTorappuLevelDataBranchData is None:
            return
        self.key = dict_string_clzTorappuLevelDataBranchData.Key()
        if dict_string_clzTorappuLevelDataBranchData.Value() is not None:
            self.value = clz_Torappu_LevelData_BranchDataT.InitFromObj(dict_string_clzTorappuLevelDataBranchData.Value())

    # dict__string__clz_Torappu_LevelData_BranchDataT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        if self.value is not None:
            value = self.value.Pack(builder)
        dict__string__clz_Torappu_LevelData_BranchDataStart(builder)
        if self.key is not None:
            dict__string__clz_Torappu_LevelData_BranchDataAddKey(builder, key)
        if self.value is not None:
            dict__string__clz_Torappu_LevelData_BranchDataAddValue(builder, value)
        dict_string_clzTorappuLevelDataBranchData = dict__string__clz_Torappu_LevelData_BranchDataEnd(builder)
        return dict_string_clzTorappuLevelDataBranchData


class clz_Torappu_CharacterData_UniqueEquipPair(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_UniqueEquipPair()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_UniqueEquipPair(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_UniqueEquipPair
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Key(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_UniqueEquipPair
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_UniqueEquipPairStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(key), 0)

def clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterData_UniqueEquipPairEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_UniqueEquipPairT(object):

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def __init__(self):
        self.key = None  # type: str
        self.level = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuCharacterDataUniqueEquipPair = clz_Torappu_CharacterData_UniqueEquipPair()
        clzTorappuCharacterDataUniqueEquipPair.Init(buf, pos)
        return cls.InitFromObj(clzTorappuCharacterDataUniqueEquipPair)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuCharacterDataUniqueEquipPair):
        x = clz_Torappu_CharacterData_UniqueEquipPairT()
        x._UnPack(clzTorappuCharacterDataUniqueEquipPair)
        return x

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def _UnPack(self, clzTorappuCharacterDataUniqueEquipPair):
        if clzTorappuCharacterDataUniqueEquipPair is None:
            return
        self.key = clzTorappuCharacterDataUniqueEquipPair.Key()
        self.level = clzTorappuCharacterDataUniqueEquipPair.Level()

    # clz_Torappu_CharacterData_UniqueEquipPairT
    def Pack(self, builder):
        if self.key is not None:
            key = builder.CreateString(self.key)
        clz_Torappu_CharacterData_UniqueEquipPairStart(builder)
        if self.key is not None:
            clz_Torappu_CharacterData_UniqueEquipPairAddKey(builder, key)
        clz_Torappu_CharacterData_UniqueEquipPairAddLevel(builder, self.level)
        clzTorappuCharacterDataUniqueEquipPair = clz_Torappu_CharacterData_UniqueEquipPairEnd(builder)
        return clzTorappuCharacterDataUniqueEquipPair


class clz_Torappu_CharacterData_MasterInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterData_MasterInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterData_MasterInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterData_MasterInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterData_MasterInfo
    def MasterId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterData_MasterInfo
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterData_MasterInfoStart(builder):
    builder.StartObject(2)

def clz_Torappu_CharacterData_MasterInfoAddMasterId(builder, masterId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(masterId), 0)

def clz_Torappu_CharacterData_MasterInfoAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterData_MasterInfoEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterData_MasterInfoT(object):

    # clz_Torappu_CharacterData_MasterInfoT
    def __init__(self):
        self.masterId = None  # type: str
        self.level = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuCharacterDataMasterInfo = clz_Torappu_CharacterData_MasterInfo()
        clzTorappuCharacterDataMasterInfo.Init(buf, pos)
        return cls.InitFromObj(clzTorappuCharacterDataMasterInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuCharacterDataMasterInfo):
        x = clz_Torappu_CharacterData_MasterInfoT()
        x._UnPack(clzTorappuCharacterDataMasterInfo)
        return x

    # clz_Torappu_CharacterData_MasterInfoT
    def _UnPack(self, clzTorappuCharacterDataMasterInfo):
        if clzTorappuCharacterDataMasterInfo is None:
            return
        self.masterId = clzTorappuCharacterDataMasterInfo.MasterId()
        self.level = clzTorappuCharacterDataMasterInfo.Level()

    # clz_Torappu_CharacterData_MasterInfoT
    def Pack(self, builder):
        if self.masterId is not None:
            masterId = builder.CreateString(self.masterId)
        clz_Torappu_CharacterData_MasterInfoStart(builder)
        if self.masterId is not None:
            clz_Torappu_CharacterData_MasterInfoAddMasterId(builder, masterId)
        clz_Torappu_CharacterData_MasterInfoAddLevel(builder, self.level)
        clzTorappuCharacterDataMasterInfo = clz_Torappu_CharacterData_MasterInfoEnd(builder)
        return clzTorappuCharacterDataMasterInfo


class clz_Torappu_CharacterInst_Metadata(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_CharacterInst_Metadata()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_CharacterInst_Metadata(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_CharacterInst_Metadata
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_CharacterInst_Metadata
    def CharacterKey(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_CharacterInst_Metadata
    def Level(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def Phase(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def FavorPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_CharacterInst_Metadata
    def PotentialRank(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def clz_Torappu_CharacterInst_MetadataStart(builder):
    builder.StartObject(5)

def clz_Torappu_CharacterInst_MetadataAddCharacterKey(builder, characterKey):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterKey), 0)

def clz_Torappu_CharacterInst_MetadataAddLevel(builder, level):
    builder.PrependInt32Slot(1, level, 0)

def clz_Torappu_CharacterInst_MetadataAddPhase(builder, phase):
    builder.PrependInt32Slot(2, phase, 0)

def clz_Torappu_CharacterInst_MetadataAddFavorPoint(builder, favorPoint):
    builder.PrependInt32Slot(3, favorPoint, 0)

def clz_Torappu_CharacterInst_MetadataAddPotentialRank(builder, potentialRank):
    builder.PrependInt32Slot(4, potentialRank, 0)

def clz_Torappu_CharacterInst_MetadataEnd(builder):
    return builder.EndObject()



class clz_Torappu_CharacterInst_MetadataT(object):

    # clz_Torappu_CharacterInst_MetadataT
    def __init__(self):
        self.characterKey = None  # type: str
        self.level = 0  # type: int
        self.phase = 0  # type: int
        self.favorPoint = 0  # type: int
        self.potentialRank = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuCharacterInstMetadata = clz_Torappu_CharacterInst_Metadata()
        clzTorappuCharacterInstMetadata.Init(buf, pos)
        return cls.InitFromObj(clzTorappuCharacterInstMetadata)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuCharacterInstMetadata):
        x = clz_Torappu_CharacterInst_MetadataT()
        x._UnPack(clzTorappuCharacterInstMetadata)
        return x

    # clz_Torappu_CharacterInst_MetadataT
    def _UnPack(self, clzTorappuCharacterInstMetadata):
        if clzTorappuCharacterInstMetadata is None:
            return
        self.characterKey = clzTorappuCharacterInstMetadata.CharacterKey()
        self.level = clzTorappuCharacterInstMetadata.Level()
        self.phase = clzTorappuCharacterInstMetadata.Phase()
        self.favorPoint = clzTorappuCharacterInstMetadata.FavorPoint()
        self.potentialRank = clzTorappuCharacterInstMetadata.PotentialRank()

    # clz_Torappu_CharacterInst_MetadataT
    def Pack(self, builder):
        if self.characterKey is not None:
            characterKey = builder.CreateString(self.characterKey)
        clz_Torappu_CharacterInst_MetadataStart(builder)
        if self.characterKey is not None:
            clz_Torappu_CharacterInst_MetadataAddCharacterKey(builder, characterKey)
        clz_Torappu_CharacterInst_MetadataAddLevel(builder, self.level)
        clz_Torappu_CharacterInst_MetadataAddPhase(builder, self.phase)
        clz_Torappu_CharacterInst_MetadataAddFavorPoint(builder, self.favorPoint)
        clz_Torappu_CharacterInst_MetadataAddPotentialRank(builder, self.potentialRank)
        clzTorappuCharacterInstMetadata = clz_Torappu_CharacterInst_MetadataEnd(builder)
        return clzTorappuCharacterInstMetadata


class clz_Torappu_LevelData_PredefinedData_PredefinedCharacter(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCharacter(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def ShowSpIllust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MasterInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_MasterInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MasterInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MasterInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacter
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder):
    builder.StartObject(13)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, direction):
    builder.PrependInt32Slot(1, direction, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, hidden):
    builder.PrependBoolSlot(2, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddShowSpIllust(builder, showSpIllust):
    builder.PrependBoolSlot(5, showSpIllust, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMasterInfos(builder, masterInfos):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(masterInfos), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartMasterInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(8, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(9, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT(object):

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def __init__(self):
        self.position = None  # type: Optional[clz_Torappu_GridPositionT]
        self.direction = 0  # type: int
        self.hidden = False  # type: bool
        self.alias = None  # type: str
        self.uniEquipIds = None  # type: List[clz_Torappu_CharacterData_UniqueEquipPairT]
        self.showSpIllust = False  # type: bool
        self.masterInfos = None  # type: List[clz_Torappu_CharacterData_MasterInfoT]
        self.inst = None  # type: Optional[clz_Torappu_CharacterInst_MetadataT]
        self.skillIndex = 0  # type: int
        self.mainSkillLvl = 0  # type: int
        self.skinId = None  # type: str
        self.tmplId = None  # type: str
        self.overrideSkillBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedDataPredefinedCharacter = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
        clzTorappuLevelDataPredefinedDataPredefinedCharacter.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedDataPredefinedCharacter):
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT()
        x._UnPack(clzTorappuLevelDataPredefinedDataPredefinedCharacter)
        return x

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def _UnPack(self, clzTorappuLevelDataPredefinedDataPredefinedCharacter):
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter is None:
            return
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter.Position() is not None:
            self.position = clz_Torappu_GridPositionT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.Position())
        self.direction = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Direction()
        self.hidden = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Hidden()
        self.alias = clzTorappuLevelDataPredefinedDataPredefinedCharacter.Alias()
        if not clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIdsIsNone():
            self.uniEquipIds = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIdsLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIds(i) is None:
                    self.uniEquipIds.append(None)
                else:
                    clz_Torappu_CharacterData_UniqueEquipPair_ = clz_Torappu_CharacterData_UniqueEquipPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.UniEquipIds(i))
                    self.uniEquipIds.append(clz_Torappu_CharacterData_UniqueEquipPair_)
        self.showSpIllust = clzTorappuLevelDataPredefinedDataPredefinedCharacter.ShowSpIllust()
        if not clzTorappuLevelDataPredefinedDataPredefinedCharacter.MasterInfosIsNone():
            self.masterInfos = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCharacter.MasterInfosLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCharacter.MasterInfos(i) is None:
                    self.masterInfos.append(None)
                else:
                    clz_Torappu_CharacterData_MasterInfo_ = clz_Torappu_CharacterData_MasterInfoT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.MasterInfos(i))
                    self.masterInfos.append(clz_Torappu_CharacterData_MasterInfo_)
        if clzTorappuLevelDataPredefinedDataPredefinedCharacter.Inst() is not None:
            self.inst = clz_Torappu_CharacterInst_MetadataT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.Inst())
        self.skillIndex = clzTorappuLevelDataPredefinedDataPredefinedCharacter.SkillIndex()
        self.mainSkillLvl = clzTorappuLevelDataPredefinedDataPredefinedCharacter.MainSkillLvl()
        self.skinId = clzTorappuLevelDataPredefinedDataPredefinedCharacter.SkinId()
        self.tmplId = clzTorappuLevelDataPredefinedDataPredefinedCharacter.TmplId()
        if not clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboardIsNone():
            self.overrideSkillBlackboard = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboardLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboard(i) is None:
                    self.overrideSkillBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCharacter.OverrideSkillBlackboard(i))
                    self.overrideSkillBlackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT
    def Pack(self, builder):
        if self.position is not None:
            position = self.position.Pack(builder)
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.uniEquipIds is not None:
            uniEquipIdslist = []
            for i in range(len(self.uniEquipIds)):
                uniEquipIdslist.append(self.uniEquipIds[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartUniEquipIdsVector(builder, len(self.uniEquipIds))
            for i in reversed(range(len(self.uniEquipIds))):
                builder.PrependUOffsetTRelative(uniEquipIdslist[i])
            uniEquipIds = builder.EndVector()
        if self.masterInfos is not None:
            masterInfoslist = []
            for i in range(len(self.masterInfos)):
                masterInfoslist.append(self.masterInfos[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartMasterInfosVector(builder, len(self.masterInfos))
            for i in reversed(range(len(self.masterInfos))):
                builder.PrependUOffsetTRelative(masterInfoslist[i])
            masterInfos = builder.EndVector()
        if self.inst is not None:
            inst = self.inst.Pack(builder)
        if self.skinId is not None:
            skinId = builder.CreateString(self.skinId)
        if self.tmplId is not None:
            tmplId = builder.CreateString(self.tmplId)
        if self.overrideSkillBlackboard is not None:
            overrideSkillBlackboardlist = []
            for i in range(len(self.overrideSkillBlackboard)):
                overrideSkillBlackboardlist.append(self.overrideSkillBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStartOverrideSkillBlackboardVector(builder, len(self.overrideSkillBlackboard))
            for i in reversed(range(len(self.overrideSkillBlackboard))):
                builder.PrependUOffsetTRelative(overrideSkillBlackboardlist[i])
            overrideSkillBlackboard = builder.EndVector()
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterStart(builder)
        if self.position is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddPosition(builder, position)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddDirection(builder, self.direction)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddHidden(builder, self.hidden)
        if self.alias is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddAlias(builder, alias)
        if self.uniEquipIds is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddUniEquipIds(builder, uniEquipIds)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddShowSpIllust(builder, self.showSpIllust)
        if self.masterInfos is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMasterInfos(builder, masterInfos)
        if self.inst is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddInst(builder, inst)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkillIndex(builder, self.skillIndex)
        clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddMainSkillLvl(builder, self.mainSkillLvl)
        if self.skinId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddSkinId(builder, skinId)
        if self.tmplId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddTmplId(builder, tmplId)
        if self.overrideSkillBlackboard is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCharacterAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)
        clzTorappuLevelDataPredefinedDataPredefinedCharacter = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterEnd(builder)
        return clzTorappuLevelDataPredefinedDataPredefinedCharacter


class clz_Torappu_LevelData_PredefinedData_PredefinedCard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedCard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def ShowSpIllust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_MasterInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MasterInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedCard
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder):
    builder.StartObject(11)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, hidden):
    builder.PrependBoolSlot(0, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddShowSpIllust(builder, showSpIllust):
    builder.PrependBoolSlot(3, showSpIllust, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMasterInfos(builder, masterInfos):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(masterInfos), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartMasterInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(6, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(7, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_PredefinedData_PredefinedCardT(object):

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def __init__(self):
        self.hidden = False  # type: bool
        self.alias = None  # type: str
        self.uniEquipIds = None  # type: List[clz_Torappu_CharacterData_UniqueEquipPairT]
        self.showSpIllust = False  # type: bool
        self.masterInfos = None  # type: List[clz_Torappu_CharacterData_MasterInfoT]
        self.inst = None  # type: Optional[clz_Torappu_CharacterInst_MetadataT]
        self.skillIndex = 0  # type: int
        self.mainSkillLvl = 0  # type: int
        self.skinId = None  # type: str
        self.tmplId = None  # type: str
        self.overrideSkillBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedDataPredefinedCard = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
        clzTorappuLevelDataPredefinedDataPredefinedCard.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedDataPredefinedCard):
        x = clz_Torappu_LevelData_PredefinedData_PredefinedCardT()
        x._UnPack(clzTorappuLevelDataPredefinedDataPredefinedCard)
        return x

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def _UnPack(self, clzTorappuLevelDataPredefinedDataPredefinedCard):
        if clzTorappuLevelDataPredefinedDataPredefinedCard is None:
            return
        self.hidden = clzTorappuLevelDataPredefinedDataPredefinedCard.Hidden()
        self.alias = clzTorappuLevelDataPredefinedDataPredefinedCard.Alias()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIdsIsNone():
            self.uniEquipIds = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIdsLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIds(i) is None:
                    self.uniEquipIds.append(None)
                else:
                    clz_Torappu_CharacterData_UniqueEquipPair_ = clz_Torappu_CharacterData_UniqueEquipPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.UniEquipIds(i))
                    self.uniEquipIds.append(clz_Torappu_CharacterData_UniqueEquipPair_)
        self.showSpIllust = clzTorappuLevelDataPredefinedDataPredefinedCard.ShowSpIllust()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfosIsNone():
            self.masterInfos = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfosLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfos(i) is None:
                    self.masterInfos.append(None)
                else:
                    clz_Torappu_CharacterData_MasterInfo_ = clz_Torappu_CharacterData_MasterInfoT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.MasterInfos(i))
                    self.masterInfos.append(clz_Torappu_CharacterData_MasterInfo_)
        if clzTorappuLevelDataPredefinedDataPredefinedCard.Inst() is not None:
            self.inst = clz_Torappu_CharacterInst_MetadataT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.Inst())
        self.skillIndex = clzTorappuLevelDataPredefinedDataPredefinedCard.SkillIndex()
        self.mainSkillLvl = clzTorappuLevelDataPredefinedDataPredefinedCard.MainSkillLvl()
        self.skinId = clzTorappuLevelDataPredefinedDataPredefinedCard.SkinId()
        self.tmplId = clzTorappuLevelDataPredefinedDataPredefinedCard.TmplId()
        if not clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboardIsNone():
            self.overrideSkillBlackboard = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboardLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboard(i) is None:
                    self.overrideSkillBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedCard.OverrideSkillBlackboard(i))
                    self.overrideSkillBlackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_PredefinedData_PredefinedCardT
    def Pack(self, builder):
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.uniEquipIds is not None:
            uniEquipIdslist = []
            for i in range(len(self.uniEquipIds)):
                uniEquipIdslist.append(self.uniEquipIds[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartUniEquipIdsVector(builder, len(self.uniEquipIds))
            for i in reversed(range(len(self.uniEquipIds))):
                builder.PrependUOffsetTRelative(uniEquipIdslist[i])
            uniEquipIds = builder.EndVector()
        if self.masterInfos is not None:
            masterInfoslist = []
            for i in range(len(self.masterInfos)):
                masterInfoslist.append(self.masterInfos[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartMasterInfosVector(builder, len(self.masterInfos))
            for i in reversed(range(len(self.masterInfos))):
                builder.PrependUOffsetTRelative(masterInfoslist[i])
            masterInfos = builder.EndVector()
        if self.inst is not None:
            inst = self.inst.Pack(builder)
        if self.skinId is not None:
            skinId = builder.CreateString(self.skinId)
        if self.tmplId is not None:
            tmplId = builder.CreateString(self.tmplId)
        if self.overrideSkillBlackboard is not None:
            overrideSkillBlackboardlist = []
            for i in range(len(self.overrideSkillBlackboard)):
                overrideSkillBlackboardlist.append(self.overrideSkillBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedCardStartOverrideSkillBlackboardVector(builder, len(self.overrideSkillBlackboard))
            for i in reversed(range(len(self.overrideSkillBlackboard))):
                builder.PrependUOffsetTRelative(overrideSkillBlackboardlist[i])
            overrideSkillBlackboard = builder.EndVector()
        clz_Torappu_LevelData_PredefinedData_PredefinedCardStart(builder)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddHidden(builder, self.hidden)
        if self.alias is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddAlias(builder, alias)
        if self.uniEquipIds is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddUniEquipIds(builder, uniEquipIds)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddShowSpIllust(builder, self.showSpIllust)
        if self.masterInfos is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMasterInfos(builder, masterInfos)
        if self.inst is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddInst(builder, inst)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkillIndex(builder, self.skillIndex)
        clz_Torappu_LevelData_PredefinedData_PredefinedCardAddMainSkillLvl(builder, self.mainSkillLvl)
        if self.skinId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddSkinId(builder, skinId)
        if self.tmplId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddTmplId(builder, tmplId)
        if self.overrideSkillBlackboard is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)
        clzTorappuLevelDataPredefinedDataPredefinedCard = clz_Torappu_LevelData_PredefinedData_PredefinedCardEnd(builder)
        return clzTorappuLevelDataPredefinedDataPredefinedCard


class clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData_PredefinedTokenCard(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def InitialCnt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Hidden(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Alias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_UniqueEquipPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def UniEquipIdsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def ShowSpIllust(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def MasterInfos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_CharacterData_MasterInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def MasterInfosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def MasterInfosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def Inst(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_CharacterInst_Metadata()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def SkillIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def MainSkillLvl(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def SkinId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def TmplId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboard(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_Blackboard_DataPair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboardLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard
    def OverrideSkillBlackboardIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStart(builder):
    builder.StartObject(12)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInitialCnt(builder, initialCnt):
    builder.PrependInt32Slot(0, initialCnt, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddHidden(builder, hidden):
    builder.PrependBoolSlot(1, hidden, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddAlias(builder, alias):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(alias), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddUniEquipIds(builder, uniEquipIds):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(uniEquipIds), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartUniEquipIdsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddShowSpIllust(builder, showSpIllust):
    builder.PrependBoolSlot(4, showSpIllust, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddMasterInfos(builder, masterInfos):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(masterInfos), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartMasterInfosVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInst(builder, inst):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(inst), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkillIndex(builder, skillIndex):
    builder.PrependInt32Slot(7, skillIndex, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddMainSkillLvl(builder, mainSkillLvl):
    builder.PrependInt32Slot(8, mainSkillLvl, 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkinId(builder, skinId):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(skinId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddTmplId(builder, tmplId):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(tmplId), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(overrideSkillBlackboard), 0)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartOverrideSkillBlackboardVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT(object):

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT
    def __init__(self):
        self.initialCnt = 0  # type: int
        self.hidden = False  # type: bool
        self.alias = None  # type: str
        self.uniEquipIds = None  # type: List[clz_Torappu_CharacterData_UniqueEquipPairT]
        self.showSpIllust = False  # type: bool
        self.masterInfos = None  # type: List[clz_Torappu_CharacterData_MasterInfoT]
        self.inst = None  # type: Optional[clz_Torappu_CharacterInst_MetadataT]
        self.skillIndex = 0  # type: int
        self.mainSkillLvl = 0  # type: int
        self.skinId = None  # type: str
        self.tmplId = None  # type: str
        self.overrideSkillBlackboard = None  # type: List[clz_Torappu_Blackboard_DataPairT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedDataPredefinedTokenCard = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
        clzTorappuLevelDataPredefinedDataPredefinedTokenCard.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedTokenCard)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedDataPredefinedTokenCard):
        x = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT()
        x._UnPack(clzTorappuLevelDataPredefinedDataPredefinedTokenCard)
        return x

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT
    def _UnPack(self, clzTorappuLevelDataPredefinedDataPredefinedTokenCard):
        if clzTorappuLevelDataPredefinedDataPredefinedTokenCard is None:
            return
        self.initialCnt = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.InitialCnt()
        self.hidden = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.Hidden()
        self.alias = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.Alias()
        if not clzTorappuLevelDataPredefinedDataPredefinedTokenCard.UniEquipIdsIsNone():
            self.uniEquipIds = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.UniEquipIdsLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedTokenCard.UniEquipIds(i) is None:
                    self.uniEquipIds.append(None)
                else:
                    clz_Torappu_CharacterData_UniqueEquipPair_ = clz_Torappu_CharacterData_UniqueEquipPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.UniEquipIds(i))
                    self.uniEquipIds.append(clz_Torappu_CharacterData_UniqueEquipPair_)
        self.showSpIllust = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.ShowSpIllust()
        if not clzTorappuLevelDataPredefinedDataPredefinedTokenCard.MasterInfosIsNone():
            self.masterInfos = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.MasterInfosLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedTokenCard.MasterInfos(i) is None:
                    self.masterInfos.append(None)
                else:
                    clz_Torappu_CharacterData_MasterInfo_ = clz_Torappu_CharacterData_MasterInfoT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.MasterInfos(i))
                    self.masterInfos.append(clz_Torappu_CharacterData_MasterInfo_)
        if clzTorappuLevelDataPredefinedDataPredefinedTokenCard.Inst() is not None:
            self.inst = clz_Torappu_CharacterInst_MetadataT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.Inst())
        self.skillIndex = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.SkillIndex()
        self.mainSkillLvl = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.MainSkillLvl()
        self.skinId = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.SkinId()
        self.tmplId = clzTorappuLevelDataPredefinedDataPredefinedTokenCard.TmplId()
        if not clzTorappuLevelDataPredefinedDataPredefinedTokenCard.OverrideSkillBlackboardIsNone():
            self.overrideSkillBlackboard = []
            for i in range(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.OverrideSkillBlackboardLength()):
                if clzTorappuLevelDataPredefinedDataPredefinedTokenCard.OverrideSkillBlackboard(i) is None:
                    self.overrideSkillBlackboard.append(None)
                else:
                    clz_Torappu_Blackboard_DataPair_ = clz_Torappu_Blackboard_DataPairT.InitFromObj(clzTorappuLevelDataPredefinedDataPredefinedTokenCard.OverrideSkillBlackboard(i))
                    self.overrideSkillBlackboard.append(clz_Torappu_Blackboard_DataPair_)

    # clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT
    def Pack(self, builder):
        if self.alias is not None:
            alias = builder.CreateString(self.alias)
        if self.uniEquipIds is not None:
            uniEquipIdslist = []
            for i in range(len(self.uniEquipIds)):
                uniEquipIdslist.append(self.uniEquipIds[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartUniEquipIdsVector(builder, len(self.uniEquipIds))
            for i in reversed(range(len(self.uniEquipIds))):
                builder.PrependUOffsetTRelative(uniEquipIdslist[i])
            uniEquipIds = builder.EndVector()
        if self.masterInfos is not None:
            masterInfoslist = []
            for i in range(len(self.masterInfos)):
                masterInfoslist.append(self.masterInfos[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartMasterInfosVector(builder, len(self.masterInfos))
            for i in reversed(range(len(self.masterInfos))):
                builder.PrependUOffsetTRelative(masterInfoslist[i])
            masterInfos = builder.EndVector()
        if self.inst is not None:
            inst = self.inst.Pack(builder)
        if self.skinId is not None:
            skinId = builder.CreateString(self.skinId)
        if self.tmplId is not None:
            tmplId = builder.CreateString(self.tmplId)
        if self.overrideSkillBlackboard is not None:
            overrideSkillBlackboardlist = []
            for i in range(len(self.overrideSkillBlackboard)):
                overrideSkillBlackboardlist.append(self.overrideSkillBlackboard[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStartOverrideSkillBlackboardVector(builder, len(self.overrideSkillBlackboard))
            for i in reversed(range(len(self.overrideSkillBlackboard))):
                builder.PrependUOffsetTRelative(overrideSkillBlackboardlist[i])
            overrideSkillBlackboard = builder.EndVector()
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardStart(builder)
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInitialCnt(builder, self.initialCnt)
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddHidden(builder, self.hidden)
        if self.alias is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddAlias(builder, alias)
        if self.uniEquipIds is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddUniEquipIds(builder, uniEquipIds)
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddShowSpIllust(builder, self.showSpIllust)
        if self.masterInfos is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddMasterInfos(builder, masterInfos)
        if self.inst is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddInst(builder, inst)
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkillIndex(builder, self.skillIndex)
        clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddMainSkillLvl(builder, self.mainSkillLvl)
        if self.skinId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddSkinId(builder, skinId)
        if self.tmplId is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddTmplId(builder, tmplId)
        if self.overrideSkillBlackboard is not None:
            clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardAddOverrideSkillBlackboard(builder, overrideSkillBlackboard)
        clzTorappuLevelDataPredefinedDataPredefinedTokenCard = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardEnd(builder)
        return clzTorappuLevelDataPredefinedDataPredefinedTokenCard


class clz_Torappu_LevelData_PredefinedData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData_PredefinedData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData_PredefinedData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData_PredefinedData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInsts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCharacter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenInstsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def CharacterCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCards(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData_PredefinedData
    def TokenCardsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def clz_Torappu_LevelData_PredefinedDataStart(builder):
    builder.StartObject(4)

def clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(characterInsts), 0)

def clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tokenInsts), 0)

def clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(characterCards), 0)

def clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tokenCards), 0)

def clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelData_PredefinedDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class clz_Torappu_LevelData_PredefinedDataT(object):

    # clz_Torappu_LevelData_PredefinedDataT
    def __init__(self):
        self.characterInsts = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT]
        self.tokenInsts = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT]
        self.characterCards = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedCardT]
        self.tokenCards = None  # type: List[clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelDataPredefinedData = clz_Torappu_LevelData_PredefinedData()
        clzTorappuLevelDataPredefinedData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelDataPredefinedData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelDataPredefinedData):
        x = clz_Torappu_LevelData_PredefinedDataT()
        x._UnPack(clzTorappuLevelDataPredefinedData)
        return x

    # clz_Torappu_LevelData_PredefinedDataT
    def _UnPack(self, clzTorappuLevelDataPredefinedData):
        if clzTorappuLevelDataPredefinedData is None:
            return
        if not clzTorappuLevelDataPredefinedData.CharacterInstsIsNone():
            self.characterInsts = []
            for i in range(clzTorappuLevelDataPredefinedData.CharacterInstsLength()):
                if clzTorappuLevelDataPredefinedData.CharacterInsts(i) is None:
                    self.characterInsts.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_ = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT.InitFromObj(clzTorappuLevelDataPredefinedData.CharacterInsts(i))
                    self.characterInsts.append(clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_)
        if not clzTorappuLevelDataPredefinedData.TokenInstsIsNone():
            self.tokenInsts = []
            for i in range(clzTorappuLevelDataPredefinedData.TokenInstsLength()):
                if clzTorappuLevelDataPredefinedData.TokenInsts(i) is None:
                    self.tokenInsts.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_ = clz_Torappu_LevelData_PredefinedData_PredefinedCharacterT.InitFromObj(clzTorappuLevelDataPredefinedData.TokenInsts(i))
                    self.tokenInsts.append(clz_Torappu_LevelData_PredefinedData_PredefinedCharacter_)
        if not clzTorappuLevelDataPredefinedData.CharacterCardsIsNone():
            self.characterCards = []
            for i in range(clzTorappuLevelDataPredefinedData.CharacterCardsLength()):
                if clzTorappuLevelDataPredefinedData.CharacterCards(i) is None:
                    self.characterCards.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedCard_ = clz_Torappu_LevelData_PredefinedData_PredefinedCardT.InitFromObj(clzTorappuLevelDataPredefinedData.CharacterCards(i))
                    self.characterCards.append(clz_Torappu_LevelData_PredefinedData_PredefinedCard_)
        if not clzTorappuLevelDataPredefinedData.TokenCardsIsNone():
            self.tokenCards = []
            for i in range(clzTorappuLevelDataPredefinedData.TokenCardsLength()):
                if clzTorappuLevelDataPredefinedData.TokenCards(i) is None:
                    self.tokenCards.append(None)
                else:
                    clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard_ = clz_Torappu_LevelData_PredefinedData_PredefinedTokenCardT.InitFromObj(clzTorappuLevelDataPredefinedData.TokenCards(i))
                    self.tokenCards.append(clz_Torappu_LevelData_PredefinedData_PredefinedTokenCard_)

    # clz_Torappu_LevelData_PredefinedDataT
    def Pack(self, builder):
        if self.characterInsts is not None:
            characterInstslist = []
            for i in range(len(self.characterInsts)):
                characterInstslist.append(self.characterInsts[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartCharacterInstsVector(builder, len(self.characterInsts))
            for i in reversed(range(len(self.characterInsts))):
                builder.PrependUOffsetTRelative(characterInstslist[i])
            characterInsts = builder.EndVector()
        if self.tokenInsts is not None:
            tokenInstslist = []
            for i in range(len(self.tokenInsts)):
                tokenInstslist.append(self.tokenInsts[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartTokenInstsVector(builder, len(self.tokenInsts))
            for i in reversed(range(len(self.tokenInsts))):
                builder.PrependUOffsetTRelative(tokenInstslist[i])
            tokenInsts = builder.EndVector()
        if self.characterCards is not None:
            characterCardslist = []
            for i in range(len(self.characterCards)):
                characterCardslist.append(self.characterCards[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartCharacterCardsVector(builder, len(self.characterCards))
            for i in reversed(range(len(self.characterCards))):
                builder.PrependUOffsetTRelative(characterCardslist[i])
            characterCards = builder.EndVector()
        if self.tokenCards is not None:
            tokenCardslist = []
            for i in range(len(self.tokenCards)):
                tokenCardslist.append(self.tokenCards[i].Pack(builder))
            clz_Torappu_LevelData_PredefinedDataStartTokenCardsVector(builder, len(self.tokenCards))
            for i in reversed(range(len(self.tokenCards))):
                builder.PrependUOffsetTRelative(tokenCardslist[i])
            tokenCards = builder.EndVector()
        clz_Torappu_LevelData_PredefinedDataStart(builder)
        if self.characterInsts is not None:
            clz_Torappu_LevelData_PredefinedDataAddCharacterInsts(builder, characterInsts)
        if self.tokenInsts is not None:
            clz_Torappu_LevelData_PredefinedDataAddTokenInsts(builder, tokenInsts)
        if self.characterCards is not None:
            clz_Torappu_LevelData_PredefinedDataAddCharacterCards(builder, characterCards)
        if self.tokenCards is not None:
            clz_Torappu_LevelData_PredefinedDataAddTokenCards(builder, tokenCards)
        clzTorappuLevelDataPredefinedData = clz_Torappu_LevelData_PredefinedDataEnd(builder)
        return clzTorappuLevelDataPredefinedData


class clz_Torappu_LevelData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = clz_Torappu_LevelData()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsclz_Torappu_LevelData(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # clz_Torappu_LevelData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # clz_Torappu_LevelData
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_Options()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def LevelId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def BgmEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def EnvironmentSe(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def MapData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_MapData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_GridPosition()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def TilesDisallowToLocateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def TilesDisallowToLocateIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # clz_Torappu_LevelData
    def Runes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # clz_Torappu_LevelData
    def OptionalRunes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__list_clz_Torappu_LegacyInLevelRuneData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def OptionalRunesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def OptionalRunesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # clz_Torappu_LevelData
    def GlobalBuffs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_GlobalBuffData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def GlobalBuffsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def GlobalBuffsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # clz_Torappu_LevelData
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # clz_Torappu_LevelData
    def ExtraRoutes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_RouteData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExtraRoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExtraRoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

    # clz_Torappu_LevelData
    def Enemies(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # clz_Torappu_LevelData
    def EnemyDbRefs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_EnemyDataDbReference()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def EnemyDbRefsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def EnemyDbRefsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # clz_Torappu_LevelData
    def Waves(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = clz_Torappu_LevelData_WaveData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def WavesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def WavesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # clz_Torappu_LevelData
    def Branches(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = dict__string__clz_Torappu_LevelData_BranchData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def BranchesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def BranchesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # clz_Torappu_LevelData
    def Predefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def HardPredefines(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = clz_Torappu_LevelData_PredefinedData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # clz_Torappu_LevelData
    def ExcludeCharIdList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # clz_Torappu_LevelData
    def ExcludeCharIdListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # clz_Torappu_LevelData
    def ExcludeCharIdListIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # clz_Torappu_LevelData
    def RandomSeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # clz_Torappu_LevelData
    def OperaConfig(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # clz_Torappu_LevelData
    def CameraPlugin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def clz_Torappu_LevelDataStart(builder):
    builder.StartObject(22)

def clz_Torappu_LevelDataAddOptions(builder, options):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)

def clz_Torappu_LevelDataAddLevelId(builder, levelId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(levelId), 0)

def clz_Torappu_LevelDataAddMapId(builder, mapId):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(mapId), 0)

def clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(bgmEvent), 0)

def clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(environmentSe), 0)

def clz_Torappu_LevelDataAddMapData(builder, mapData):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(mapData), 0)

def clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(tilesDisallowToLocate), 0)

def clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRunes(builder, runes):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(runes), 0)

def clz_Torappu_LevelDataStartRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddOptionalRunes(builder, optionalRunes):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(optionalRunes), 0)

def clz_Torappu_LevelDataStartOptionalRunesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(globalBuffs), 0)

def clz_Torappu_LevelDataStartGlobalBuffsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRoutes(builder, routes):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)

def clz_Torappu_LevelDataStartRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(extraRoutes), 0)

def clz_Torappu_LevelDataStartExtraRoutesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddEnemies(builder, enemies):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(enemies), 0)

def clz_Torappu_LevelDataStartEnemiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(enemyDbRefs), 0)

def clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddWaves(builder, waves):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(waves), 0)

def clz_Torappu_LevelDataStartWavesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddBranches(builder, branches):
    builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(branches), 0)

def clz_Torappu_LevelDataStartBranchesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddPredefines(builder, predefines):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(predefines), 0)

def clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines):
    builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(hardPredefines), 0)

def clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList):
    builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(excludeCharIdList), 0)

def clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def clz_Torappu_LevelDataAddRandomSeed(builder, randomSeed):
    builder.PrependInt32Slot(19, randomSeed, 0)

def clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig):
    builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(operaConfig), 0)

def clz_Torappu_LevelDataAddCameraPlugin(builder, cameraPlugin):
    builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(cameraPlugin), 0)

def clz_Torappu_LevelDataEnd(builder):
    return builder.EndObject()


try:
    from typing import List, Optional
except:
    pass

class clz_Torappu_LevelDataT(object):

    # clz_Torappu_LevelDataT
    def __init__(self):
        self.options = None  # type: Optional[clz_Torappu_LevelData_OptionsT]
        self.levelId = None  # type: str
        self.mapId = None  # type: str
        self.bgmEvent = None  # type: str
        self.environmentSe = None  # type: str
        self.mapData = None  # type: Optional[clz_Torappu_MapDataT]
        self.tilesDisallowToLocate = None  # type: List[clz_Torappu_GridPositionT]
        self.runes = None  # type: List[clz_Torappu_LegacyInLevelRuneDataT]
        self.optionalRunes = None  # type: List[dict__string__list_clz_Torappu_LegacyInLevelRuneDataT]
        self.globalBuffs = None  # type: List[clz_Torappu_LevelData_GlobalBuffDataT]
        self.routes = None  # type: List[clz_Torappu_RouteDataT]
        self.extraRoutes = None  # type: List[clz_Torappu_RouteDataT]
        self.enemies = None  # type: List[clz_Torappu_LevelData_EnemyDataT]
        self.enemyDbRefs = None  # type: List[clz_Torappu_LevelData_EnemyDataDbReferenceT]
        self.waves = None  # type: List[clz_Torappu_LevelData_WaveDataT]
        self.branches = None  # type: List[dict__string__clz_Torappu_LevelData_BranchDataT]
        self.predefines = None  # type: Optional[clz_Torappu_LevelData_PredefinedDataT]
        self.hardPredefines = None  # type: Optional[clz_Torappu_LevelData_PredefinedDataT]
        self.excludeCharIdList = None  # type: List[str]
        self.randomSeed = 0  # type: int
        self.operaConfig = None  # type: str
        self.cameraPlugin = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        clzTorappuLevelData = clz_Torappu_LevelData()
        clzTorappuLevelData.Init(buf, pos)
        return cls.InitFromObj(clzTorappuLevelData)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, clzTorappuLevelData):
        x = clz_Torappu_LevelDataT()
        x._UnPack(clzTorappuLevelData)
        return x

    # clz_Torappu_LevelDataT
    def _UnPack(self, clzTorappuLevelData):
        if clzTorappuLevelData is None:
            return
        if clzTorappuLevelData.Options() is not None:
            self.options = clz_Torappu_LevelData_OptionsT.InitFromObj(clzTorappuLevelData.Options())
        self.levelId = clzTorappuLevelData.LevelId()
        self.mapId = clzTorappuLevelData.MapId()
        self.bgmEvent = clzTorappuLevelData.BgmEvent()
        self.environmentSe = clzTorappuLevelData.EnvironmentSe()
        if clzTorappuLevelData.MapData() is not None:
            self.mapData = clz_Torappu_MapDataT.InitFromObj(clzTorappuLevelData.MapData())
        if not clzTorappuLevelData.TilesDisallowToLocateIsNone():
            self.tilesDisallowToLocate = []
            for i in range(clzTorappuLevelData.TilesDisallowToLocateLength()):
                if clzTorappuLevelData.TilesDisallowToLocate(i) is None:
                    self.tilesDisallowToLocate.append(None)
                else:
                    clz_Torappu_GridPosition_ = clz_Torappu_GridPositionT.InitFromObj(clzTorappuLevelData.TilesDisallowToLocate(i))
                    self.tilesDisallowToLocate.append(clz_Torappu_GridPosition_)
        if not clzTorappuLevelData.RunesIsNone():
            self.runes = []
            for i in range(clzTorappuLevelData.RunesLength()):
                if clzTorappuLevelData.Runes(i) is None:
                    self.runes.append(None)
                else:
                    clz_Torappu_LegacyInLevelRuneData_ = clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(clzTorappuLevelData.Runes(i))
                    self.runes.append(clz_Torappu_LegacyInLevelRuneData_)
        if not clzTorappuLevelData.OptionalRunesIsNone():
            self.optionalRunes = []
            for i in range(clzTorappuLevelData.OptionalRunesLength()):
                if clzTorappuLevelData.OptionalRunes(i) is None:
                    self.optionalRunes.append(None)
                else:
                    dict__string__list_clz_Torappu_LegacyInLevelRuneData_ = dict__string__list_clz_Torappu_LegacyInLevelRuneDataT.InitFromObj(clzTorappuLevelData.OptionalRunes(i))
                    self.optionalRunes.append(dict__string__list_clz_Torappu_LegacyInLevelRuneData_)
        if not clzTorappuLevelData.GlobalBuffsIsNone():
            self.globalBuffs = []
            for i in range(clzTorappuLevelData.GlobalBuffsLength()):
                if clzTorappuLevelData.GlobalBuffs(i) is None:
                    self.globalBuffs.append(None)
                else:
                    clz_Torappu_LevelData_GlobalBuffData_ = clz_Torappu_LevelData_GlobalBuffDataT.InitFromObj(clzTorappuLevelData.GlobalBuffs(i))
                    self.globalBuffs.append(clz_Torappu_LevelData_GlobalBuffData_)
        if not clzTorappuLevelData.RoutesIsNone():
            self.routes = []
            for i in range(clzTorappuLevelData.RoutesLength()):
                if clzTorappuLevelData.Routes(i) is None:
                    self.routes.append(None)
                else:
                    clz_Torappu_RouteData_ = clz_Torappu_RouteDataT.InitFromObj(clzTorappuLevelData.Routes(i))
                    self.routes.append(clz_Torappu_RouteData_)
        if not clzTorappuLevelData.ExtraRoutesIsNone():
            self.extraRoutes = []
            for i in range(clzTorappuLevelData.ExtraRoutesLength()):
                if clzTorappuLevelData.ExtraRoutes(i) is None:
                    self.extraRoutes.append(None)
                else:
                    clz_Torappu_RouteData_ = clz_Torappu_RouteDataT.InitFromObj(clzTorappuLevelData.ExtraRoutes(i))
                    self.extraRoutes.append(clz_Torappu_RouteData_)
        if not clzTorappuLevelData.EnemiesIsNone():
            self.enemies = []
            for i in range(clzTorappuLevelData.EnemiesLength()):
                if clzTorappuLevelData.Enemies(i) is None:
                    self.enemies.append(None)
                else:
                    clz_Torappu_LevelData_EnemyData_ = clz_Torappu_LevelData_EnemyDataT.InitFromObj(clzTorappuLevelData.Enemies(i))
                    self.enemies.append(clz_Torappu_LevelData_EnemyData_)
        if not clzTorappuLevelData.EnemyDbRefsIsNone():
            self.enemyDbRefs = []
            for i in range(clzTorappuLevelData.EnemyDbRefsLength()):
                if clzTorappuLevelData.EnemyDbRefs(i) is None:
                    self.enemyDbRefs.append(None)
                else:
                    clz_Torappu_LevelData_EnemyDataDbReference_ = clz_Torappu_LevelData_EnemyDataDbReferenceT.InitFromObj(clzTorappuLevelData.EnemyDbRefs(i))
                    self.enemyDbRefs.append(clz_Torappu_LevelData_EnemyDataDbReference_)
        if not clzTorappuLevelData.WavesIsNone():
            self.waves = []
            for i in range(clzTorappuLevelData.WavesLength()):
                if clzTorappuLevelData.Waves(i) is None:
                    self.waves.append(None)
                else:
                    clz_Torappu_LevelData_WaveData_ = clz_Torappu_LevelData_WaveDataT.InitFromObj(clzTorappuLevelData.Waves(i))
                    self.waves.append(clz_Torappu_LevelData_WaveData_)
        if not clzTorappuLevelData.BranchesIsNone():
            self.branches = []
            for i in range(clzTorappuLevelData.BranchesLength()):
                if clzTorappuLevelData.Branches(i) is None:
                    self.branches.append(None)
                else:
                    dict__string__clz_Torappu_LevelData_BranchData_ = dict__string__clz_Torappu_LevelData_BranchDataT.InitFromObj(clzTorappuLevelData.Branches(i))
                    self.branches.append(dict__string__clz_Torappu_LevelData_BranchData_)
        if clzTorappuLevelData.Predefines() is not None:
            self.predefines = clz_Torappu_LevelData_PredefinedDataT.InitFromObj(clzTorappuLevelData.Predefines())
        if clzTorappuLevelData.HardPredefines() is not None:
            self.hardPredefines = clz_Torappu_LevelData_PredefinedDataT.InitFromObj(clzTorappuLevelData.HardPredefines())
        if not clzTorappuLevelData.ExcludeCharIdListIsNone():
            self.excludeCharIdList = []
            for i in range(clzTorappuLevelData.ExcludeCharIdListLength()):
                self.excludeCharIdList.append(clzTorappuLevelData.ExcludeCharIdList(i))
        self.randomSeed = clzTorappuLevelData.RandomSeed()
        self.operaConfig = clzTorappuLevelData.OperaConfig()
        self.cameraPlugin = clzTorappuLevelData.CameraPlugin()

    # clz_Torappu_LevelDataT
    def Pack(self, builder):
        if self.options is not None:
            options = self.options.Pack(builder)
        if self.levelId is not None:
            levelId = builder.CreateString(self.levelId)
        if self.mapId is not None:
            mapId = builder.CreateString(self.mapId)
        if self.bgmEvent is not None:
            bgmEvent = builder.CreateString(self.bgmEvent)
        if self.environmentSe is not None:
            environmentSe = builder.CreateString(self.environmentSe)
        if self.mapData is not None:
            mapData = self.mapData.Pack(builder)
        if self.tilesDisallowToLocate is not None:
            tilesDisallowToLocatelist = []
            for i in range(len(self.tilesDisallowToLocate)):
                tilesDisallowToLocatelist.append(self.tilesDisallowToLocate[i].Pack(builder))
            clz_Torappu_LevelDataStartTilesDisallowToLocateVector(builder, len(self.tilesDisallowToLocate))
            for i in reversed(range(len(self.tilesDisallowToLocate))):
                builder.PrependUOffsetTRelative(tilesDisallowToLocatelist[i])
            tilesDisallowToLocate = builder.EndVector()
        if self.runes is not None:
            runeslist = []
            for i in range(len(self.runes)):
                runeslist.append(self.runes[i].Pack(builder))
            clz_Torappu_LevelDataStartRunesVector(builder, len(self.runes))
            for i in reversed(range(len(self.runes))):
                builder.PrependUOffsetTRelative(runeslist[i])
            runes = builder.EndVector()
        if self.optionalRunes is not None:
            optionalRuneslist = []
            for i in range(len(self.optionalRunes)):
                optionalRuneslist.append(self.optionalRunes[i].Pack(builder))
            clz_Torappu_LevelDataStartOptionalRunesVector(builder, len(self.optionalRunes))
            for i in reversed(range(len(self.optionalRunes))):
                builder.PrependUOffsetTRelative(optionalRuneslist[i])
            optionalRunes = builder.EndVector()
        if self.globalBuffs is not None:
            globalBuffslist = []
            for i in range(len(self.globalBuffs)):
                globalBuffslist.append(self.globalBuffs[i].Pack(builder))
            clz_Torappu_LevelDataStartGlobalBuffsVector(builder, len(self.globalBuffs))
            for i in reversed(range(len(self.globalBuffs))):
                builder.PrependUOffsetTRelative(globalBuffslist[i])
            globalBuffs = builder.EndVector()
        if self.routes is not None:
            routeslist = []
            for i in range(len(self.routes)):
                routeslist.append(self.routes[i].Pack(builder))
            clz_Torappu_LevelDataStartRoutesVector(builder, len(self.routes))
            for i in reversed(range(len(self.routes))):
                builder.PrependUOffsetTRelative(routeslist[i])
            routes = builder.EndVector()
        if self.extraRoutes is not None:
            extraRouteslist = []
            for i in range(len(self.extraRoutes)):
                extraRouteslist.append(self.extraRoutes[i].Pack(builder))
            clz_Torappu_LevelDataStartExtraRoutesVector(builder, len(self.extraRoutes))
            for i in reversed(range(len(self.extraRoutes))):
                builder.PrependUOffsetTRelative(extraRouteslist[i])
            extraRoutes = builder.EndVector()
        if self.enemies is not None:
            enemieslist = []
            for i in range(len(self.enemies)):
                enemieslist.append(self.enemies[i].Pack(builder))
            clz_Torappu_LevelDataStartEnemiesVector(builder, len(self.enemies))
            for i in reversed(range(len(self.enemies))):
                builder.PrependUOffsetTRelative(enemieslist[i])
            enemies = builder.EndVector()
        if self.enemyDbRefs is not None:
            enemyDbRefslist = []
            for i in range(len(self.enemyDbRefs)):
                enemyDbRefslist.append(self.enemyDbRefs[i].Pack(builder))
            clz_Torappu_LevelDataStartEnemyDbRefsVector(builder, len(self.enemyDbRefs))
            for i in reversed(range(len(self.enemyDbRefs))):
                builder.PrependUOffsetTRelative(enemyDbRefslist[i])
            enemyDbRefs = builder.EndVector()
        if self.waves is not None:
            waveslist = []
            for i in range(len(self.waves)):
                waveslist.append(self.waves[i].Pack(builder))
            clz_Torappu_LevelDataStartWavesVector(builder, len(self.waves))
            for i in reversed(range(len(self.waves))):
                builder.PrependUOffsetTRelative(waveslist[i])
            waves = builder.EndVector()
        if self.branches is not None:
            brancheslist = []
            for i in range(len(self.branches)):
                brancheslist.append(self.branches[i].Pack(builder))
            clz_Torappu_LevelDataStartBranchesVector(builder, len(self.branches))
            for i in reversed(range(len(self.branches))):
                builder.PrependUOffsetTRelative(brancheslist[i])
            branches = builder.EndVector()
        if self.predefines is not None:
            predefines = self.predefines.Pack(builder)
        if self.hardPredefines is not None:
            hardPredefines = self.hardPredefines.Pack(builder)
        if self.excludeCharIdList is not None:
            excludeCharIdListlist = []
            for i in range(len(self.excludeCharIdList)):
                excludeCharIdListlist.append(builder.CreateString(self.excludeCharIdList[i]))
            clz_Torappu_LevelDataStartExcludeCharIdListVector(builder, len(self.excludeCharIdList))
            for i in reversed(range(len(self.excludeCharIdList))):
                builder.PrependUOffsetTRelative(excludeCharIdListlist[i])
            excludeCharIdList = builder.EndVector()
        if self.operaConfig is not None:
            operaConfig = builder.CreateString(self.operaConfig)
        if self.cameraPlugin is not None:
            cameraPlugin = builder.CreateString(self.cameraPlugin)
        clz_Torappu_LevelDataStart(builder)
        if self.options is not None:
            clz_Torappu_LevelDataAddOptions(builder, options)
        if self.levelId is not None:
            clz_Torappu_LevelDataAddLevelId(builder, levelId)
        if self.mapId is not None:
            clz_Torappu_LevelDataAddMapId(builder, mapId)
        if self.bgmEvent is not None:
            clz_Torappu_LevelDataAddBgmEvent(builder, bgmEvent)
        if self.environmentSe is not None:
            clz_Torappu_LevelDataAddEnvironmentSe(builder, environmentSe)
        if self.mapData is not None:
            clz_Torappu_LevelDataAddMapData(builder, mapData)
        if self.tilesDisallowToLocate is not None:
            clz_Torappu_LevelDataAddTilesDisallowToLocate(builder, tilesDisallowToLocate)
        if self.runes is not None:
            clz_Torappu_LevelDataAddRunes(builder, runes)
        if self.optionalRunes is not None:
            clz_Torappu_LevelDataAddOptionalRunes(builder, optionalRunes)
        if self.globalBuffs is not None:
            clz_Torappu_LevelDataAddGlobalBuffs(builder, globalBuffs)
        if self.routes is not None:
            clz_Torappu_LevelDataAddRoutes(builder, routes)
        if self.extraRoutes is not None:
            clz_Torappu_LevelDataAddExtraRoutes(builder, extraRoutes)
        if self.enemies is not None:
            clz_Torappu_LevelDataAddEnemies(builder, enemies)
        if self.enemyDbRefs is not None:
            clz_Torappu_LevelDataAddEnemyDbRefs(builder, enemyDbRefs)
        if self.waves is not None:
            clz_Torappu_LevelDataAddWaves(builder, waves)
        if self.branches is not None:
            clz_Torappu_LevelDataAddBranches(builder, branches)
        if self.predefines is not None:
            clz_Torappu_LevelDataAddPredefines(builder, predefines)
        if self.hardPredefines is not None:
            clz_Torappu_LevelDataAddHardPredefines(builder, hardPredefines)
        if self.excludeCharIdList is not None:
            clz_Torappu_LevelDataAddExcludeCharIdList(builder, excludeCharIdList)
        clz_Torappu_LevelDataAddRandomSeed(builder, self.randomSeed)
        if self.operaConfig is not None:
            clz_Torappu_LevelDataAddOperaConfig(builder, operaConfig)
        if self.cameraPlugin is not None:
            clz_Torappu_LevelDataAddCameraPlugin(builder, cameraPlugin)
        clzTorappuLevelData = clz_Torappu_LevelDataEnd(builder)
        return clzTorappuLevelData


